&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Функция СериализоватьОбъектФормыНаСервере()
	
	ОбъектДанных = РеквизитФормыВЗначение("ТаблицаДанныхExcel");
	
	// Преобразуем "таблицы в ячейках" из строки в таблицу.
	ОбъектОбработки().СериализоватьОбъектТаблицыВЯчейках(ОбъектДанных, ТаблицаНомеровКолонок);
	
	ЗначениеТекст = ОбъектОбработки().СериализоватьОбъект(ОбъектДанных);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  ШаблонСтроки  - Строка - шаблон строки с параметрами (вхождениями вида "%<номер параметра>", 
//                           например "%1 пошел в %2");
//  Параметр<n>   - Строка - значение подставляемого параметра.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел
//  в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	ЕстьПараметрыСПроцентом = Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Возвращает строку, полученную из массива элементов, разделенных символом разделителя
//
// Параметры:
//  Массив - Массив - массив элементов из которых необходимо получить строку
//  Разделитель - Строка - любой набор символов, который будет использован как разделитель между элементами в строке
//
// Возвращаемое значение:
//  Результат - Строка - строка, полученная из массива элементов, разделенных символом разделителя
// 
Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",")
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент Из Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНомеровКолонок

&НаКлиенте
Процедура ТаблицаНомеровКолонокПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНомеровКолонок.ТекущиеДанные;
	ТекущиеДанные.Имя = ВладелецФормы.ИмяПоПредставлениюНаКлиенте(ТекущиеДанные.Представление);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНомеровКолонокТипЗначенияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Заголовок, Значение, ЗакрыватьПриВыборе",
		"", Элементы.ТаблицаНомеровКолонок.ТекущиеДанные.ТипЗначения, Ложь);
	ОткрытьФорму(Параметры.ПолноеИмяОбработки + ".Форма.ВыборТипа", ПараметрыФормы, ЭтаФорма
		,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНомеровКолонокТипЗначенияПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНомеровКолонок.ТекущиеДанные;
	ТипЗначенияПредставлениеПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияПредставлениеПриИзменении(СтрокаНомеровКолонок)
	
	ТипЗначенияПредставление = ""; ТипЗначения = СтрокаНомеровКолонок.ТипЗначения;
	ТипЗначенияПредставлениеПриИзмененииНаСервере(СтрокаНомеровКолонок.ТипЗначенияПредставление, ТипЗначенияПредставление, ТипЗначения);
	
	СтрокаНомеровКолонок.ТипЗначения = ТипЗначения;
	СтрокаНомеровКолонок.ТипЗначенияПредставление = ТипЗначенияПредставление;
	
КонецПроцедуры

&НаСервере
Процедура ТипЗначенияПредставлениеПриИзмененииНаСервере(ПредставлениеТипов, ТипЗначенияПредставление, ТипЗначения)
	
	ОбъектОбработка = ОбъектОбработки();
	
	ТипЗначенияНовый = ОбъектОбработка.ОписаниеТиповПоПредставлению(ПредставлениеТипов);
	Если ТипЗначенияНовый.Типы().Количество() > 0 Тогда
		ТипЗначения = ТипЗначенияНовый
	КонецЕсли;
	
	ТипЗначенияПредставление = ПолучитьСтрокуИзМассиваПодстрок(
		ОбъектОбработка.ОписаниеТиповПредставление(ТипЗначения).ВыгрузитьЗначения(),";"
		);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНомеровКолонокТипЗначенияПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		
        СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = Новый СписокЗначений;
		Для Каждого ЭлПодбор Из ВладелецФормы.СписокТиповПодбор Цикл
			Если Найти(ВРег(ЭлПодбор.Значение), ВРег(Текст)) > 0 Тогда
				ДанныеВыбора.Добавить(ЭлПодбор.Значение);
			КонецЕсли;
			Если ДанныеВыбора.Количество() = 10 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьТаблицаНомеровКолонокНаСервере()
	
	ОбъектОбработка = ОбъектОбработки();

	Для Каждого Стр Из ЭтаФорма["ТаблицаНомеровКолонок"] Цикл
		Стр.ТипЗначенияПредставление = ПолучитьСтрокуИзМассиваПодстрок(
			ОбъектОбработка.ОписаниеТиповПредставление(Стр.ТипЗначения).ВыгрузитьЗначения(),";"
			);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаДанныхExcelОбновитьНаСервере()
	
	ОбъектОбработка = ОбъектОбработки();
	
	// Устанавливаем колонки по макету.
	ТаблицаДанныхExcelОбъект = ТаблицаДанныхExcel.Выгрузить();
	ОбъектОбработка.ЗагрузитьКолонкиПоТаблицеНомеровКолонок(ТаблицаДанныхExcelОбъект, ТаблицаНомеровКолонок);
	ТаблицаДанныхExcelОбъект.Колонки.Удалить("__ИмяЛиста__");
	
	МассивРеквизитов = Новый Массив;
	Для Каждого ТекКолонка Из ТаблицаДанныхExcelОбъект.Колонки Цикл
		
		Если Найти(",ИсходныйНомерСтроки,НомерСтроки,", ","+ТекКолонка.Имя+",") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекКолонка.ТипЗначения) ИЛИ
			 ТекКолонка.ТипЗначения.Типы().Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекКолонка.ТипЗначения.СодержитТип(Тип("ДанныеФормыКоллекция")) Тогда
			ТекКолонкаТипЗначения = Новый ОписаниеТипов("Строка");
		Иначе
			ТекКолонкаТипЗначения = ТекКолонка.ТипЗначения
		КонецЕсли;
		
		ТекКолонкаЗаголовок = ?(ПустаяСтрока(ТекКолонка.Заголовок), ТекКолонка.Имя, ТекКолонка.Заголовок);
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекКолонка.Имя,
								  ТекКолонкаТипЗначения,
								  "ТаблицаДанныхExcel",
								  ТекКолонкаЗаголовок));
	КонецЦикла;
	
	СуществующиеРеквизиты = Новый Массив;
	ОбъектОбработка.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, СуществующиеРеквизиты, "ТаблицаДанныхExcel");
	СуществующиеРеквизиты.Удалить(СуществующиеРеквизиты.Найти("ТаблицаДанныхExcel.НомерСтроки"));
	
	ОбъектОбработка.ИзменитьРеквизитыФормы(ЭтаФорма, МассивРеквизитов, Новый Массив, СуществующиеРеквизиты);
	
	ОбъектОбработка.СоздатьЭлементыФормыПоТаблицеНомеровКолонок(ЭтаФорма, "ТаблицаДанныхExcel", ТаблицаНомеровКолонок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхExcelОбновить(Команда)
	
	ТаблицаДанныхExcelОбновитьНаСервере();
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаТаблицаДанных;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаДанныхExcelЗагрузитьИзТекстаНаСервере(ДанныеСтр)
	
	ОбъектОбработка = ОбъектОбработки();
	
	ОбъектДанных = ОбъектОбработка.ДеСериализоватьОбъект(ДанныеСтр);
	
	// Читаем номера колонок по полученной таблице значений.
	ИмяТЗ = "ТаблицаНомеровКолонок";
	ЭтаФорма[ИмяТЗ].Очистить();
	НомерКолонки = 0;
	Для Каждого ТекКолонка Из ОбъектДанных.Колонки Цикл
		Если Найти(",НомерСтроки,ИсходныйНомерСтроки,", ","+ТекКолонка.Имя+",") > 0 Тогда
			Продолжить;
		КонецЕсли;
		НомерКолонки = НомерКолонки + 1;
		СтрокаКолонок = ЭтаФорма[ИмяТЗ].Добавить();
		СтрокаКолонок.Имя 			= ТекКолонка.Имя;
		Если ТекКолонка.ТипЗначения.СодержитТип(Тип("ТаблицаЗначений")) Тогда;
			СтрокаКолонок.ТипЗначения 	= Новый ОписаниеТипов("ДанныеФормыКоллекция");
		Иначе
			СтрокаКолонок.ТипЗначения 	= ТекКолонка.ТипЗначения;
		КонецЕсли;
		СтрокаКолонок.Представление = ?(ПустаяСтрока(ТекКолонка.Заголовок),ТекКолонка.Имя,ТекКолонка.Заголовок);
		СтрокаКолонок.НомерКолонки 	= НомерКолонки;
	КонецЦикла;
	ОбновитьТаблицаНомеровКолонокНаСервере();
	
	// Преобразуем "таблицы в ячейках" из таблиц в строки.
	ОбъектОбработки().ДесериализоватьОбъектТаблицыВЯчейках(ОбъектДанных, ТаблицаНомеровКолонок);
	
	// Обновляем таблицу формы "ТаблицаДанныхExcel" по новым колонкам.
	ТаблицаДанныхExcelОбновитьНаСервере();
	
	// Заполняем данные ТаблицаДанныхExcel.
	ТаблицаДанныхExcel.Очистить();
	Для Каждого СтрокаДанных Из ОбъектДанных Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаДанныхExcel.Добавить(), СтрокаДанных);
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхExcelЗагрузитьИзТекста(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ТаблицаДанныхExcelЗагрузитьИзТекстаОбработка", ЭтаФорма);
	
	ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИзExcel.Форма.ВводТекста",
		Новый Структура("Действие","ТаблицаДанныхExcelЗагрузитьИзТекста")
		, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
&НаКлиенте
Процедура ТаблицаДанныхExcelЗагрузитьИзТекстаОбработка(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ТекстОшибки", "");
	 
	Если ТипЗнч(Результат) = Тип("Строка") И Не ПустаяСтрока(Результат) Тогда
		Попытка
			ТаблицаДанныхExcelЗагрузитьИзТекстаНаСервере(Результат);
		Исключение
			ДополнительныеПараметры.ТекстОшибки = "Ошибка десериализации текста таблицы:" + ОписаниеОшибки();
			Сообщить(ДополнительныеПараметры.ТекстОшибки)
		КонецПопытки;
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхExcelОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДанныхExcel.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ИмяПоля = Сред(Элемент.Имя,СтрДлина("ТаблицаДанныхExcel")+1);
	
	ФормаОткрытие = ПолучитьФорму("ВнешняяОбработка.ЗагрузкаИзExcel.Форма.ФормаРедакторТаблицыЗначений",
		Новый Структура("ИмяПоля,ЗначениеТекст", ИмяПоля,ТекущиеДанные[ИмяПоля]), ЭтаФорма);
	ФормаОткрытие.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаОткрытие.Открыть();
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаЗначениеТекст Тогда
		СериализоватьОбъектФормыНаСервере()
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектОбработка = ОбъектОбработки();
	Попытка
		ИспользуемоеИмяФайлаВнешнейОбработки = ОбъектОбработка.ИспользуемоеИмяФайла;
		КонтекстОбработки = "ВнешняяОбработка";
	Исключение
		КонтекстОбработки = "Обработка";
	КонецПопытки;
	Параметры.ПолноеИмяОбработки = ПодставитьПараметрыВСтроку("%1.%2", КонтекстОбработки, ОбъектОбработка.Метаданные().Имя);
	
	ЗначениеТекст = Параметры.ЗначениеТекст;
	
	//ДеСериализоватьОбъектФормыНаСервере(ЗначениеТекст);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтаФорма, Параметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены, закрыть редактор?';"
		    + " en = 'Do you want to continue?'"), РежимДиалогаВопрос.ДаНет, 0);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)

	СериализоватьОбъектФормыНаСервере();
	
	Если Найти(ВладелецФормы.ИмяФормы, ".ФормаРедакторТаблицыЗначений") = 0 Тогда
		ТекущиеДанные = ВладелецФормы.Элементы.ТаблицаДанныхExcelОбъект.ТекущиеДанные;
	Иначе
		ТекущиеДанные = ВладелецФормы.Элементы.ТаблицаДанныхExcel.ТекущиеДанные;
	КонецЕсли;
	ТекущиеДанные[Параметры.ИмяПоля] = ЗначениеТекст;
	ВладелецФормы.Модифицированность = Истина;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТаблицаДанныхExcelЗагрузитьИзТекстаОбработка(ЗначениеТекст, Неопределено);
	Модифицированность = Ложь;
КонецПроцедуры

