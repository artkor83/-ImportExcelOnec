
&НаКлиенте
Процедура НачатьПоиск(Команда)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Заголовок, РежимПоискаТипов, ЗакрыватьПриВыборе", "", Истина, Ложь);
	ОткрытьФорму(Параметры.ПолноеИмяОбработки + ".Форма.ВыборТипа", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Процедура НачатьПоискНаСервере(ДанныеПоиска, ТипМетаданныхПоиск)
	
	ТаблицаТипов.Очистить();
	
	// Поиск по объектам ссылочного типа.
	Для Каждого ТипПоиска Из ТипМетаданныхПоиск.Типы() Цикл
		
		Масс = Новый Массив; Масс.Добавить(ТипПоиска);
		ТекОписание = Новый ОписаниеТипов(Масс);
		
		ТекСсылка = ТекОписание.ПривестиЗначение();
		Если Найти(ТекСсылка, "РегистрНакопленияКлючЗаписи") > 0 Тогда
			ИмяРегистра = Сред(ТекСсылка, Найти(ТекСсылка,".")+1);
			ЭлементМД = Метаданные.РегистрыНакопления[ИмяРегистра];
		Иначе
			ЭлементМД = ТекСсылка.Метаданные();
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ЭлементМД) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъектаМетаданных = ЭлементМД.ПолноеИмя();
		Позиция = Найти(ИмяОбъектаМетаданных, ".");
		ТипМД = Лев(ИмяОбъектаМетаданных, Позиция - 1);
		
		Для Каждого СтрокаДанных Из ДанныеПоиска Цикл
			ОбработкаТипаРеквизита(СтрокаДанных, ЭлементМД, ТипМД);
		КонецЦикла;
		
		Для Каждого СтрокаДанных Из ДанныеПоиска Цикл
			Для Каждого ЭлементМД1 Из ЭлементМД.Реквизиты Цикл
				ОбработкаТипаРеквизита(СтрокаДанных, ЭлементМД1, ТипМД);
			КонецЦикла;
		КонецЦикла;
		Для Каждого СтрокаДанных Из ДанныеПоиска Цикл
			Для Каждого ЭлементМД0 Из ЭлементМД.ТабличныеЧасти Цикл
				Для Каждого ЭлементМД1 Из ЭлементМД0.Реквизиты Цикл
					ОбработкаТипаРеквизита(СтрокаДанных, ЭлементМД1, ТипМД);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЦикла;

	// Поиск по реквизитам регистров.
	Для Каждого ТипПоиска Из ТипМетаданныхПоиск.Типы() Цикл
		
		Масс = Новый Массив; Масс.Добавить(ТипПоиска);
		ТекОписание = Новый ОписаниеТипов(Масс);
		
		ТекСсылка = ТекОписание.ПривестиЗначение();
		Если Найти(ТекСсылка, "РегистрНакопленияКлючЗаписи") > 0 Тогда
			ИмяРегистра = Сред(ТекСсылка, Найти(ТекСсылка,".")+1);
			ЭлементМД = Метаданные.РегистрыНакопления[ИмяРегистра];
		Иначе
			ЭлементМД = ТекСсылка.Метаданные();
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоРегистр(ЭлементМД) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъектаМетаданных = ЭлементМД.ПолноеИмя();
		Позиция = Найти(ИмяОбъектаМетаданных, ".");
		ТипМД = Лев(ИмяОбъектаМетаданных, Позиция - 1);
			
		Для Каждого СтрокаДанных Из ДанныеПоиска Цикл
			ОбработкаТипаРеквизита(СтрокаДанных, ЭлементМД, ТипМД);
		КонецЦикла;
		
		Для Каждого СтрокаДанных Из ДанныеПоиска Цикл
			Для Каждого ЭлементМД1 Из ЭлементМД.Измерения Цикл
				ОбработкаТипаРеквизита(СтрокаДанных, ЭлементМД1, ТипМД);
			КонецЦикла;
			Для Каждого ЭлементМД1 Из ЭлементМД.Ресурсы Цикл
				ОбработкаТипаРеквизита(СтрокаДанных, ЭлементМД1, ТипМД);
			КонецЦикла;
			Для Каждого ЭлементМД1 Из ЭлементМД.Реквизиты Цикл
				ОбработкаТипаРеквизита(СтрокаДанных, ЭлементМД1, ТипМД);
			КонецЦикла;
		КонецЦикла;
	
	КонецЦикла;
	
	ТаблицаТипов.Сортировать("Имя");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаТипаРеквизита(СтрокаДанных, ЭлементМД, ТипМД)

	Если ЕстьРеквизитИлиСвойствоОбъекта(ЭлементМД, "Тип") Тогда
		ТекТип = ЭлементМД.Тип;
	ИначеЕсли Лев(ТипМД, 7) = "Регистр" Тогда
		Возврат
	Иначе
		Типы = Новый Массив;
		Типы.Добавить(Тип(ТипМД+"Ссылка." + ЭлементМД.Имя));
		ТекТип = Новый ОписаниеТипов(Типы);
	КонецЕсли;
	
	Если ТаблицаТипов.НайтиСтроки(Новый Структура("Имя,ТипЗначения",СтрокаДанных.Имя, ТекТип)).Количество() = 1 Тогда
		Возврат
	КонецЕсли;
	
	РеквизитПоиска = СтрокаДанных[?(ВидПоиска = 0, "Имя", "Представление")];
	Если ВРЕГ(РеквизитПоиска) = ВРег(ЭлементМД.Имя) ИЛИ ВРЕГ(РеквизитПоиска) = ВРег(ЭлементМД.Синоним) Тогда
		НоваяСтрока             = ТаблицаТипов.Добавить();
		НоваяСтрока.Имя         = СтрокаДанных.Имя;
		НоваяСтрока.Представление            = СтрокаДанных.Представление;
		НоваяСтрока.ТипЗначения = ТекТип;
		НоваяСтрока.ТипЗначенияПредставление = ПолучитьСтрокуИзМассиваПодстрок(ОбъектОбработки().ТипПредставление(ТекТип), ",");
		Если ТаблицаТипов.НайтиСтроки(Новый Структура("Имя",СтрокаДанных.Имя)).Количество() > 1 Тогда
			НоваяСтрока.ЭтоВторичнаяЗапись       = Истина;
		КонецЕсли;
		НоваяСтрока.Метаданные  = ЭлементМД.ПолноеИмя();
		НоваяСтрока.Картинка    = БиблиотекаКартинок[ТипМД];
		НоваяСтрока.Пометка     = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектОбработка = ОбъектОбработки();
	Попытка
		ИспользуемоеИмяФайлаВнешнейОбработки = ОбъектОбработка.ИспользуемоеИмяФайла;
		КонтекстОбработки = "ВнешняяОбработка";
	Исключение
		КонтекстОбработки = "Обработка";
	КонецПопытки;
	Параметры.ПолноеИмяОбработки = ПодставитьПараметрыВСтроку("%1.%2", КонтекстОбработки, ОбъектОбработка.Метаданные().Имя);
	
	Для Каждого СтрокаДанных Из Параметры.СписокЗначений Цикл
		Если СтрокаДанных.Пометка Тогда
			СписокКолонок.Добавить(СтрокаДанных.Значение, СтрокаДанных.Представление, СтрокаДанных.Пометка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПоискТиповОтбор" Тогда
		
		ДанныеПоиска = Новый Массив;
		Для Каждого СтрокаДанных Из СписокКолонок Цикл
			Значение = Новый Структура("Имя,Представление", СтрокаДанных.Значение, СтрокаДанных.Представление);
			ДанныеПоиска.Добавить(Значение);
		КонецЦикла;
		
		НачатьПоискНаСервере(ДанныеПоиска, Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Принять(Команда)

	ДанныеТипов = Новый Соответствие;
	
	Для Каждого СтрокаДанных Из ТаблицаТипов Цикл
		
		Если НЕ СтрокаДанных.Пометка Тогда
			Продолжить;
		КонецЕсли;
			
		ОписаниеТипа = ДанныеТипов[СтрокаДанных.Имя];
		
		Если ОписаниеТипа = Неопределено Тогда
			ОписаниеТипаНовый = СтрокаДанных.ТипЗначения;
		Иначе
			
			ОписаниеТипаТекущий = СтрокаДанных.ТипЗначения;
			
			СтрокаМаксДлина = Макс(ОписаниеТипа.КвалификаторыСтроки.Длина,
								  ОписаниеТипаТекущий.КвалификаторыСтроки.Длина);
			ЧислоМаксДлина = Макс(ОписаниеТипа.КвалификаторыЧисла.Разрядность,
								  ОписаниеТипаТекущий.КвалификаторыЧисла.Разрядность);
			ЧислоМаксТочность = Макс(ОписаниеТипа.КвалификаторыЧисла.РазрядностьДробнойЧасти,
									 ОписаниеТипаТекущий.КвалификаторыЧисла.РазрядностьДробнойЧасти);
									 
			ДатаМаксЧасть = ОписаниеТипаТекущий.КвалификаторыДаты.ЧастиДаты;
			ДатаМаксЧасть = ?(ОписаниеТипа.КвалификаторыДаты.ЧастиДаты = ЧастиДаты.ДатаВремя, ЧастиДаты.ДатаВремя, ДатаМаксЧасть);
									 
			ОписаниеТипаНовый = Новый ОписаниеТипов(ОписаниеТипа, ОписаниеТипаТекущий.Типы(),,
				Новый КвалификаторыЧисла(ЧислоМаксДлина, ЧислоМаксТочность), Новый КвалификаторыСтроки(СтрокаМаксДлина),
				Новый КвалификаторыДаты(ДатаМаксЧасть));
			
		КонецЕсли;
		
		ДанныеТипов.Вставить(СтрокаДанных.Имя, ОписаниеТипаНовый);
		
	КонецЦикла;
	
	Оповестить("ПоискТипов", ДанныеТипов, ЭтаФорма);
	
	Закрыть();
		
КонецПроцедуры

#Область БСП

&НаКлиентеНаСервереБезКонтекста
// Функция "расщепляет" строку на подстроки, используя заданный
//      разделитель. Разделитель может иметь любую длину.
//      Если в качестве разделителя задан пробел, рядом стоящие пробелы
//      считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//      игнорируются.
//      Например,
//      РазложитьСтрокуВМассивПодстрок(",один,,,два", ",") возвратит массив значений из пяти элементов,
//      три из которых - пустые строки, а
//      РазложитьСтрокуВМассивПодстрок(" один   два", " ") возвратит массив значений из двух элементов
//
//  Параметры:
//      Стр -           строка, которую необходимо разложить на подстроки.
//                      Параметр передается по значению.
//      Разделитель -   строка-разделитель, по умолчанию - запятая.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Возвращает строку, полученную из массива элементов, разделенных символом разделителя
//
// Параметры:
//  Массив - Массив - массив элементов из которых необходимо получить строку
//  Разделитель - Строка - любой набор символов, который будет использован как разделитель между элементами в строке
//
// Возвращаемое значение:
//  Результат - Строка - строка, полученная из массива элементов, разделенных символом разделителя
// 
Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",")
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент Из Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  ШаблонСтроки  - Строка - шаблон строки с параметрами (вхождениями вида "%<номер параметра>", 
//                           например "%1 пошел в %2");
//  Параметр<n>   - Строка - значение подставляемого параметра.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел
//  в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	ЕстьПараметрыСПроцентом = Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Проверяет наличие реквизита или свойства у произвольного объекта без обращения к метаданным.
//
// Параметры:
//  Объект       - Произвольный - объект, у которого нужно проверить наличие реквизита или свойства;
//  ИмяРеквизита - Строка       - имя реквизита или свойства.
//
// Возвращаемое значение:
//  Булево - Истина, если есть.
//
Функция ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Экспорт
	
	КлючУникальности   = Новый УникальныйИдентификатор;
	СтруктураРеквизита = Новый Структура(ИмяРеквизита, КлючУникальности);
	ЗаполнитьЗначенияСвойств(СтруктураРеквизита, Объект);
	
	Возврат СтруктураРеквизита[ИмяРеквизита] <> КлючУникальности;
	
КонецФункции

#КонецОбласти

