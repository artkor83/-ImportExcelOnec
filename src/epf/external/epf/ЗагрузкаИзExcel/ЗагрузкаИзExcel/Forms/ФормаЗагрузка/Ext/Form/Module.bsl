
&НаКлиенте
Перем мФормаУКО;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбъектОбработка = ОбъектОбработки();
	Попытка
		ИспользуемоеИмяФайлаВнешнейОбработки = ОбъектОбработка.ИспользуемоеИмяФайла;
		КонтекстОбработки = "ВнешняяОбработка";
	Исключение
		КонтекстОбработки = "Обработка";
	КонецПопытки;
	Параметры.ПолноеИмяОбработки = ПодставитьПараметрыВСтроку("%1.%2", КонтекстОбработки, ОбъектОбработка.Метаданные().Имя);
	
	Параметры.АлгоритмыСтрокой = "Алгоритм_ПоискДанныхСтроки,Алгоритм_ПослеЧтенияДанных,Алгоритм_ЗагрузкаДанныхСтроки,Алгоритм_ПередЗагрузкойДанных";
	
	СписокТиповПодбор.Добавить("Булево");
	СписокТиповПодбор.Добавить("Дата(Дата)");
	СписокТиповПодбор.Добавить("Дата(Дата время)");
	СписокТиповПодбор.Добавить("Строка(99)");
	СписокТиповПодбор.Добавить("Число(15,2)");
	СписокТиповПодбор.Добавить("Неопределено");
	СписокТиповПодбор.Добавить("Null");
	
	Для Каждого МД Из Метаданные.Справочники Цикл
		СписокТиповПодбор.Добавить(СтрЗаменить(МД.ПолноеИмя(),".","Ссылка."))
	КонецЦикла;
	Для Каждого МД Из Метаданные.Документы Цикл
		СписокТиповПодбор.Добавить(СтрЗаменить(МД.ПолноеИмя(),".","Ссылка."))
	КонецЦикла;
	Для Каждого МД Из Метаданные.ПланыВидовХарактеристик Цикл
		СписокТиповПодбор.Добавить(СтрЗаменить(МД.ПолноеИмя(),".","Ссылка."))
	КонецЦикла;
	Для Каждого МД Из Метаданные.ПланыСчетов Цикл
		СписокТиповПодбор.Добавить(СтрЗаменить(МД.ПолноеИмя(),".","Ссылка."))
	КонецЦикла;
	
	ТаблицаИсторияОбновитьНаСервере();
	
	МДОбработки = Метаданные.Обработки.Найти("УКО_УправляемаяКонсольОтчетов");
	Параметры.УКО_Встроено = (МДОбработки <> Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		ТекстПредупреждения = "Обработка ""Загрузка из excel"": Все изменения будут не сохранены!!!";
		Отказ = Истина;
		Возврат
	КонецЕсли;
	
	СохранениеНастройкиДиалог(Отказ, "ПередЗакрытием");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ШагЧтенияДанных = 50; // Порция количества строк при чтении. Пока оставляем так.
	
	Если РежимЧтенияДанных = "" Тогда
		РежимЧтенияДанных = "По макету";
	КонецЕсли;
	
	ОбновитьКлючНастроекОсновной(Ложь, Ложь, КлючНастроекОсновной);
	
	ТаблицаИсторияПоказатьСкрыть(Неопределено);
	
	УстановитьВидимостьДоступность();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОписаниеТипов" Тогда
		
		Элементы.ТаблицаНомеровКолонок.ТекущиеДанные.ТипЗначения = Параметр;
		ТипЗначенияПредставление = "";
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, ТипЗначенияПредставление);
		Элементы.ТаблицаНомеровКолонок.ТекущиеДанные.ТипЗначенияПредставление = ТипЗначенияПредставление
		
	ИначеЕсли ИмяСобытия = "ПоискТипов" Тогда
		
		ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, ТипЗначенияПредставление);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаОповещенияНаСервере(ИмяСобытия, Параметр, ТипЗначенияПредставление)
	
	ОбъектОбработка = ОбъектОбработки();
	
	Если ИмяСобытия = "ОписаниеТипов" Тогда
		
		ТипЗначенияПредставление = ПолучитьСтрокуИзМассиваПодстрок(
			ОбъектОбработка.ОписаниеТиповПредставление(Параметр).ВыгрузитьЗначения(),";"
			);
			
	ИначеЕсли ИмяСобытия = "ПоискТипов" Тогда

		Для Каждого СтрокаДанных Из ТаблицаНомеровКолонок Цикл
			
			ТекОписаниеТипов = Параметр[СтрокаДанных.Имя];
			Если ТекОписаниеТипов <> Неопределено Тогда
				
				СтрокаДанных.ТипЗначения = ТекОписаниеТипов;
				СтрокаДанных.ТипЗначенияПредставление = ПолучитьСтрокуИзМассиваПодстрок(
					ОбъектОбработка.ОписаниеТиповПредставление(СтрокаДанных.ТипЗначения).ВыгрузитьЗначения(),";"
					);
			КонецЕсли;
		
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СохранениеНастройкиДиалог(Истина, "ИмяФайлаЗагрузкиНачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиПриИзменении(Элемент)
	СохранениеНастройкиДиалог(Истина, "ИмяФайлаЗагрузкиПриИзменении");
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗапуститьПриложение(ИмяФайлаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяЛистаПриИзменении(Элемент)
	СохранениеНастройкиДиалог(Истина, "ИмяЛистаПриИзменении");
КонецПроцедуры

&НаКлиенте
Процедура ИмяЛистаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ХранилищеОН_СохранитьВсе();
КонецПроцедуры

&НаКлиенте
Процедура РежимЧтенияДанныхПриИзменении(Элемент)
	
	СохранениеНастройкиДиалог(Истина, "РежимЧтенияДанныхПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ТабДокПриИзменении(Элемент)
	
	Если ТабДокОбъект.ВысотаТаблицы > 0 И ПустаяСтрока(ИмяФайлаЗагрузкиМакет) Тогда
		
		ИмяФайлаЗагрузкиМакет = "Данные_" + Формат(ТекущаяДата(),"ДФ=yyyyMMddHHmm");
		ОбновитьКлючНастроекОсновной(Ложь, Ложь);
		НомерКонец = 0;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиМакетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СохранениеНастройкиДиалог(Истина, "ИмяФайлаЗагрузкиМакетНачалоВыбора");
	
КонецПроцедуры
	
&НаКлиенте
Процедура ИмяФайлаЗагрузкиМакетПриИзменении(Элемент)
	
	СохранениеНастройкиДиалог(Истина, "ИмяФайлаЗагрузкиМакетПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЛистовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокЛистов1 = Новый СписокЗначений;
	СписокЛистов1.ЗагрузитьЗначения(Элементы.ИмяЛиста.СписокВыбора.ВыгрузитьЗначения());
	Для Каждого ТекЭлемент Из СписокЛистов Цикл
		СписокЛистов1.НайтиПоЗначению(ТекЭлемент.Значение).Пометка = Истина;
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("СписокЛистовОбработка", ЭтаФорма);
	ПараметрыФормы = Новый Структура("СписокЗначений, Заголовок", СписокЛистов1, "Листы для загрузки данных:");
	ОткрытьФорму(Параметры.ПолноеИмяОбработки + ".Форма.ВыборСписокЗначений", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаВТранзакцииПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ТабДокОчистить(Команда)
	ТабДокОчиститьНаСервере();
КонецПроцедуры

&НаСервере
Процедура ТабДокОчиститьНаСервере()
	ТабДокОбъект.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсторияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТаблицаИсторияВыбрать(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаНомеровКолонок

&НаКлиенте
Процедура ТаблицаНомеровКолонокПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНомеровКолонок.ТекущиеДанные;
	ТекущиеДанные.Имя = ИмяПоПредставлению(ТекущиеДанные.Представление);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНомеровКолонокПрочитать(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеВводаНомераСтроки", ЭтаФорма);
	ПоказатьВводЧисла(Оповещение, 1, "Введите номер строки шапки таблицы", 10, 0);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНомеровКолонокТипЗначенияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("Заголовок, Значение, ЗакрыватьПриВыборе",
		"", Элементы.ТаблицаНомеровКолонок.ТекущиеДанные.ТипЗначения, Ложь);
	ОткрытьФорму(Параметры.ПолноеИмяОбработки + ".Форма.ВыборТипа", ПараметрыФормы, ЭтаФорма
		,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНомеровКолонокПоискТипов(Команда)
	
	СписокКолонок = Новый СписокЗначений;
	Для Каждого СтрокаДанных Из ТаблицаНомеровКолонок Цикл
		СписокКолонок.Добавить(СтрокаДанных.Имя,СтрокаДанных.Представление, ПустаяСтрока(СтрокаДанных.ТипЗначенияПредставление));
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ПоискТиповОбработка", ЭтаФорма);
	ПараметрыФормы = Новый Структура("СписокЗначений, Заголовок", СписокКолонок, "Колонки для подбора типов:");
	ОткрытьФорму(Параметры.ПолноеИмяОбработки + ".Форма.ВыборСписокЗначений", ПараметрыФормы, ЭтаФорма
		,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНомеровКолонокЗагрузитьТипыМакет(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТипыМакетОбработка", ЭтаФорма, Новый Структура("Действие", "ФормаЗагрузитьТипыМакет"));
	ОткрытьФорму(Параметры.ПолноеИмяОбработки + ".Форма.ФормаЗагрузитьТипыМакет", Новый Структура()
		, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНомеровКолонокЗагрузитьОднуСтрокуСТипамиМакет(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТипыМакетОбработка", ЭтаФорма, Новый Структура("Действие", "ФормаЗагрузитьОднуСтрокуСТипами"));
	ОткрытьФорму(Параметры.ПолноеИмяОбработки + ".Форма.ФормаЗагрузитьОднуСтрокуСТипами", Новый Структура()
		, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНомеровКолонокТипЗначенияПредставлениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаНомеровКолонок.ТекущиеДанные;
	ТипЗначенияПредставлениеПриИзменении(ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Процедура ТипЗначенияПредставлениеПриИзмененииНаСервере(ПредставлениеТипов, ТипЗначенияПредставление, ТипЗначения)
	
	ОбъектОбработка = ОбъектОбработки();
	
	ТипЗначенияНовый = ОбъектОбработка.ОписаниеТиповПоПредставлению(ПредставлениеТипов);
	Если ТипЗначенияНовый.Типы().Количество() > 0 Тогда
		ТипЗначения = ТипЗначенияНовый
	КонецЕсли;
	
	ТипЗначенияПредставление = ПолучитьСтрокуИзМассиваПодстрок(
		ОбъектОбработка.ОписаниеТиповПредставление(ТипЗначения).ВыгрузитьЗначения(),";"
		);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНомеровКолонокТипЗначенияПредставлениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст) Тогда
		
        СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = Новый СписокЗначений;
		Для Каждого ЭлПодбор Из СписокТиповПодбор Цикл
			Если Найти(ВРег(ЭлПодбор.Значение), ВРег(Текст)) > 0 Тогда
				ДанныеВыбора.Добавить(ЭлПодбор.Значение);
			КонецЕсли;
			Если ДанныеВыбора.Количество() = 10 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоискТиповОбработка(Результат, ДополнительныеПараметры) Экспорт
	 
	Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		
		НеВыбрано = Истина;
		Для Каждого СтрокаДанных Из Результат Цикл
			Если СтрокаДанных.Пометка Тогда
				НеВыбрано = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если НеВыбрано Тогда
			Сообщить("Не выбрано ни 1 колонки");
			Возврат
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("Заголовок, СписокЗначений, ЗакрыватьПриВыборе", "", Результат, Ложь);
		ОткрытьФорму(Параметры.ПолноеИмяОбработки + ".Форма.ФормаПоискТипов", ПараметрыФормы, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТипыМакетОбработка(Результат, ДополнительныеПараметры) Экспорт
	 
	Если ТипЗнч(Результат) = Тип("ТабличныйДокумент") Тогда
		
		Если ДополнительныеПараметры.Действие = "ФормаЗагрузитьОднуСтрокуСТипами" Тогда
			Колонки = Новый Структура("ИмяКолонки,ПредставлениеТипа,Значение",1,3,2)
		Иначе
			Колонки = Новый Структура("ИмяКолонки,ПредставлениеТипа",1,2)
		КонецЕсли;
		
		Если ДополнительныеПараметры.Действие = "ФормаЗагрузитьОднуСтрокуСТипами" Тогда
			ТаблицаНомеровКолонок.Очистить();
			ЗначенияСтроки = Новый Структура();
			ТабДокОчистить(Неопределено);
		КонецЕсли;
		
		ТипСтрока99  = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(99));
		
		НомКол = 0;
		Для НомерСтроки = 2 По Результат.ВысотаТаблицы Цикл
			
			ТекстЯчейкиИмяКолонки = Результат.Область(НомерСтроки, Колонки.ИмяКолонки, НомерСтроки, Колонки.ИмяКолонки).Текст;
			Если ПустаяСтрока(ТекстЯчейкиИмяКолонки) Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяКолонки = ИмяПоПредставлению(ТекстЯчейкиИмяКолонки);
			Если ИмяКолонки = "НомерСтроки" Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЯчейкиПредставлениеТипа = Результат.Область(НомерСтроки, Колонки.ПредставлениеТипа,
				НомерСтроки, Колонки.ПредставлениеТипа).Текст;
				
			Если ТекстЯчейкиПредставлениеТипа = "Число" Тогда
				ТекстЯчейкиПредставлениеТипа = ТекстЯчейкиПредставлениеТипа + "(16,3)"
			ИначеЕсли ТекстЯчейкиПредставлениеТипа = "Строка" Тогда
				ТекстЯчейкиПредставлениеТипа = ТекстЯчейкиПредставлениеТипа + "(99)"
			ИначеЕсли ТекстЯчейкиПредставлениеТипа = "Дата" Тогда
				ТекстЯчейкиПредставлениеТипа = "Дата(Дата и время)"
			КонецЕсли;
			
			СтрокаНомеровКолонок = Неопределено;
			Для Каждого СтрокаКолонок Из ТаблицаНомеровКолонок Цикл
				Если СтрокаКолонок.Имя = ИмяКолонки Тогда
					СтрокаНомеровКолонок = СтрокаКолонок;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаНомеровКолонок = Неопределено Тогда
				СтрокаНомеровКолонок = ТаблицаНомеровКолонок.Добавить();
				СтрокаНомеровКолонок.Имя = ИмяКолонки;
				СтрокаНомеровКолонок.Представление = ИмяКолонки;
			КонецЕсли;
			
			СтрокаНомеровКолонок.ТипЗначенияПредставление = ТекстЯчейкиПредставлениеТипа;
			ТипЗначенияПредставлениеПриИзменении(СтрокаНомеровКолонок);
			
			Если ДополнительныеПараметры.Действие = "ФормаЗагрузитьОднуСтрокуСТипами" Тогда
				НомКол = НомКол + 1;
				СтрокаНомеровКолонок.НомерКолонки = НомКол;
				ЗначениеСтрока = Результат.Область(НомерСтроки, Колонки.Значение, НомерСтроки, Колонки.Значение).Текст;
				ЗначенияСтроки.Вставить(ИмяКолонки, ЗначениеСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Возврат
	КонецЕсли;
	
	Если ДополнительныеПараметры.Действие = "ФормаЗагрузитьОднуСтрокуСТипами" Тогда
		
		НомКол = 0;
		Для Каждого ЗначениеСтроки Из ЗначенияСтроки Цикл
			Если ЗначениеСтроки.Ключ = "НомерСтроки" Тогда
				Продолжить;
			КонецЕсли;
			НомКол = НомКол + 1;
			ТабДокОбъект.Область(1,НомКол,1,НомКол).Текст = ЗначениеСтроки.Ключ;
			ТабДокОбъект.Область(2,НомКол,2,НомКол).Текст = ЗначениеСтроки.Значение;
		КонецЦикла;
		
		ТабДокПриИзменении(Неопределено);
		НомерНачало = 2; НомерКонец = 2;
		
	КонецЕсли;
	 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицТаблицаДанныхExcel

&НаСервере
Функция ТаблицаДанныхExcelОтладкаТаблицаНаСервере(ТолькоПомеченные = Истина)
	
	Если ТолькоПомеченные Тогда
		ДанныеТаблицы = Объект.ТаблицаДанныхExcelОбъект.Выгрузить(Новый Структура("Пометка", Истина))
	Иначе
		ДанныеТаблицы = Объект.ТаблицаДанныхExcelОбъект.Выгрузить()
	КонецЕсли;
	
	Возврат ОбъектОбработки().СериализоватьОбъект(ДанныеТаблицы)
	
КонецФункции

&НаКлиенте
Процедура ТаблицаДанныхExcelОтладкаТаблица(Команда)
	
	Текст = ТаблицаДанныхExcelОтладкаТаблицаНаСервере();
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(Текст);
	ТекстДок.Показать("Таблица данных");
	
КонецПроцедуры

&НаСервере
Функция ТаблицаДанныхExcelОтладкаСтрокаТаблицыНаСервере(ДанныеСтроки)
	Возврат ОбъектОбработки().СериализоватьОбъект(ДанныеСтроки)
КонецФункции

&НаКлиенте
Процедура ТаблицаДанныхExcelОтладкаСтрокаТаблицы(Команда)
	
	ДанныеСтроки = Новый Структура;
	Для Каждого ТекСтрока Из ТаблицаНомеровКолонок Цикл ДанныеСтроки.Вставить(ТекСтрока.Имя); КонецЦикла;
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, Элементы.ТаблицаДанныхExcelОбъект.ТекущиеДанные);
	
	Текст = ТаблицаДанныхExcelОтладкаСтрокаТаблицыНаСервере(ДанныеСтроки);
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.УстановитьТекст(Текст);
	ТекстДок.Показать("Строка таблицы");
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаДанныхExcelОбновитьНаСервере()
	
	ОбъектОбработка = ОбъектОбработки();
	
	// Устанавливаем колонки по макету.
	ТаблицаДанныхExcelОбъект = ОбъектОбработка.ТаблицаДанныхExcelОбъект.Выгрузить();
	ОбъектОбработка.ЗагрузитьКолонкиПоТаблицеНомеровКолонок(ТаблицаДанныхExcelОбъект, ТаблицаНомеровКолонок);
	
	МассивРеквизитов = Новый Массив;
	Для Каждого ТекКолонка Из ТаблицаДанныхExcelОбъект.Колонки Цикл
		
		Если Найти(",__ИмяЛиста__,НомерСтроки,Пометка,", ","+ТекКолонка.Имя+",") > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекКолонка.ТипЗначения) ИЛИ
			 ТекКолонка.ТипЗначения.Типы().Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекКолонкаЗаголовок = ?(ПустаяСтрока(ТекКолонка.Заголовок), ТекКолонка.Имя, ТекКолонка.Заголовок);
		
		МассивРеквизитов.Добавить(Новый РеквизитФормы(ТекКолонка.Имя,
								  ТекКолонка.ТипЗначения,
								  "Объект.ТаблицаДанныхExcelОбъект",
								  ТекКолонкаЗаголовок));
	КонецЦикла;
	
	СуществующиеРеквизиты = Новый Массив;
	ОбъектОбработка.ЗаполнитьМассивИменРеквизитовФормы(ЭтаФорма, СуществующиеРеквизиты, "Объект.ТаблицаДанныхExcelОбъект");
	СуществующиеРеквизиты.Удалить(СуществующиеРеквизиты.Найти("Объект.ТаблицаДанныхExcelОбъект.КоличествоСтрок"));
	СуществующиеРеквизиты.Удалить(СуществующиеРеквизиты.Найти("Объект.ТаблицаДанныхExcelОбъект.НомерСтроки"));
	СуществующиеРеквизиты.Удалить(СуществующиеРеквизиты.Найти("Объект.ТаблицаДанныхExcelОбъект.Пометка"));
	
	ОбъектОбработка.ИзменитьРеквизитыФормы(ЭтаФорма, МассивРеквизитов, Новый Массив, СуществующиеРеквизиты);
	
	ОбъектОбработка.СоздатьЭлементыФормыПоТаблицеНомеровКолонок(ЭтаФорма, "ТаблицаДанныхExcelОбъект", ТаблицаНомеровКолонок);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхExcelОбновить(Команда)
	
	ТаблицаДанныхExcelОбновитьНаСервере();
	Элементы.СтраницыЧтениеЗагрузка.ТекущаяСтраница = Элементы.СтраницаВыводДанных;
	Если Настройки_СохранятьТаблицаДанныхExcel Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаДанныхExcelЗагрузитьИзТекстаНаСервере(ДанныеСтр)
	
	ОбъектОбработка = ОбъектОбработки();
	
	ТЗ = ОбъектОбработка.ДеСериализоватьОбъект(ДанныеСтр);
	
	// Читаем номера колонок по полученной таблице значений.
	ИмяТЗ = "ТаблицаНомеровКолонок";
	ЭтаФорма[ИмяТЗ].Очистить();
	НомерКолонки = 0;
	Для Каждого ТекКолонка Из ТЗ.Колонки Цикл
		Если Найти(",__ИмяЛиста__,НомерСтроки,Пометка,", ","+ТекКолонка.Имя+",") > 0 Тогда
			Продолжить;
		КонецЕсли;
		НомерКолонки = НомерКолонки + 1;
		СтрокаКолонок = ЭтаФорма[ИмяТЗ].Добавить();
		СтрокаКолонок.Имя 			= ТекКолонка.Имя;
		СтрокаКолонок.ТипЗначения 	= ТекКолонка.ТипЗначения;
		СтрокаКолонок.Представление = ?(ПустаяСтрока(ТекКолонка.Заголовок),ТекКолонка.Имя,ТекКолонка.Заголовок);
		СтрокаКолонок.НомерКолонки 	= НомерКолонки;
	КонецЦикла;
	ОбновитьТаблицаНомеровКолонокНаСервере();
	
	// Обновляем таблицу формы "ТаблицаДанныхExcel" по новым колонкам.
	ТаблицаДанныхExcelОбновитьНаСервере();
	
	// Заполняем данные ТаблицаДанныхExcel.
	Объект.ТаблицаДанныхExcelОбъект.Очистить();
	Для Каждого СтрокаДанных Из ТЗ Цикл
		ЗаполнитьЗначенияСвойств(Объект.ТаблицаДанныхExcelОбъект.Добавить(), СтрокаДанных);
	КонецЦикла;
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхExcelЗагрузитьИзТекста(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ТаблицаДанныхExcelЗагрузитьИзТекстаОбработка", ЭтаФорма);
	
	ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИзExcel.Форма.ВводТекста",
		Новый Структура("Действие","ТаблицаДанныхExcelЗагрузитьИзТекста")
		, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УКО_ПередатьВременнуюТаблицу(Команда)
	
	ИмяМД = ?(Параметры.УКО_Встроено, "Обработка", "ВнешняяОбработка");
	Если мФормаУКО = Неопределено Тогда
		Попытка
			мФормаУКО = ПолучитьФорму(ИмяМД + ".УКО_УправляемаяКонсольОтчетов.Форма");
		Исключение
			ОткрытьФорму(ИмяМД + ".ЗагрузкаИзExcel.Форма.УКО_Подключить",,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецПопытки;
	КонецЕсли;
	
	Если мФормаУКО <> Неопределено Тогда
		
        СписокВыбора = Новый СписокЗначений;
		Для Каждого СтрокаДанных Из мФормаУКО.ВременныеТаблицы Цикл
			СписокВыбора.Добавить(СтрокаДанных.Имя);
		КонецЦикла;
		
		Оповещение = Новый ОписаниеОповещения("УКО_ПередатьВременнуюТаблицуОбработка", ЭтаФорма);
		ПараметрыФормы = Новый Структура("СписокЗначений, Заголовок", СписокВыбора, "Временная таблица УКО");
		ОткрытьФорму(Параметры.ПолноеИмяОбработки + ".Форма.УКО_ВыборВТ", ПараметрыФормы, ЭтаФорма,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УКО_ПередатьВременнуюТаблицуОбработка(ЗначениеВыбора, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеВыбора = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ИмяВТ =	ИмяПоПредставлению(ЗначениеВыбора);
	
	Если ПустаяСтрока(ИмяВТ) Тогда
		Возврат
	КонецЕсли;
	
	Если мФормаУКО = Неопределено Тогда
		Сообщить("Управляемая консоль отчетов не выбрана");
		Возврат
	КонецЕсли;
		
	Если Не мФормаУКО.Открыта() Тогда
		мФормаУКО.Открыть();
	КонецЕсли;
	мФормаУКО.Активизировать();

	СтрокаДанныхВТ = Неопределено;
	Для Каждого СтрокаДанных Из мФормаУКО.ВременныеТаблицы Цикл
		Если СтрокаДанных.Имя = ИмяВТ Тогда
			СтрокаДанныхВТ = СтрокаДанных;
		КонецЕсли;
	КонецЦикла;
	Если СтрокаДанныхВТ = Неопределено Тогда
		СтрокаДанныхВТ = мФормаУКО.ВременныеТаблицы.Добавить();
		СтрокаДанныхВТ.Имя			 = ИмяВТ;
		СтрокаДанныхВТ.Представление =	"<Таблица значений>";
		СтрокаДанныхВТ.Тип 			 = "Значение";
		СтрокаДанныхВТ.УникальныйИдентификатор = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	UID = СтрокаДанныхВТ.УникальныйИдентификатор;
	
	мФормаУКО.РедактированиеЗначенияВременнаяТаблицаЗавершено(
		УКО_ПередатьВременнуюТаблицуНаСервере(мФормаУКО.УникальныйИдентификатор),
		Новый Структура("UID",UID)
	);
	
	мФормаУКО.Элементы.ПанельНастроек.ТекущаяСтраница = мФормаУКО.Элементы.СтраницаВременныеТаблицы;
	мФормаУКО.Элементы.ВременныеТаблицы.ТекущаяСтрока = СтрокаДанныхВТ.ПолучитьИдентификатор();
	мФормаУКО.КоличествоВременныхТаблиц = мФормаУКО.ВременныеТаблицы.Количество();
	мФормаУКО.Модифицированность = Истина;
	
	СтрокаЗапросВТ = "
	|ВЫБРАТЬ ";
	
	СтрокаЗапросВТПоля = "";
	Кол = 0;
	Для Каждого СтрокаДанных Из ЭтаФорма.ТаблицаНомеровКолонок Цикл
		Кол = Кол + 1;
		СтрокаЗапросВТПоля = СтрокаЗапросВТПоля + "
		|	ТаблицаДанных."+СтрокаДанных.Имя+" КАК "+СтрокаДанных.Имя +
			?(Кол = ЭтаФорма.ТаблицаНомеровКолонок.Количество(),"",",");
	КонецЦикла;
	
	СтрокаЗапросВТ = СтрокаЗапросВТ + СтрокаЗапросВТПоля;
	СтрокаЗапросВТ = СтрокаЗапросВТ + "
	|ИЗ
	|	" + ИмяВТ + " КАК ТаблицаДанных;";
	
	Сообщить(СтрокаЗапросВТ);

КонецПроцедуры

&НаСервере
Функция УКО_ПередатьВременнуюТаблицуНаСервере(Адрес)

	Возврат ПоместитьВоВременноеХранилище(Объект.ТаблицаДанныхExcelОбъект.Выгрузить(), Адрес);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицаВнешниеФайлы

&НаКлиенте
Процедура ТаблицаВнешниеФайлыИмяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаВнешниеФайлы.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.ТипФайла) Тогда
		ТекущиеДанные.ТипФайла = "Внешняя обработка"
	КонецЕсли;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Если ТекущиеДанные.ТипФайла = "Внешняя обработка" Тогда
		Фильтр = "Файл обработки(*.epf)|*.epf";
		Расширение = "epf";
	Иначе
		Фильтр = "Файл макета(*.mxl)|*.mxl";
		Расширение = "mxl";
	КонецЕсли;
	
	ДиалогОткрытияФайла.ПолноеИмяФайла	   = ТекущиеДанные.Имя;
	ДиалогОткрытияФайла.Фильтр             = Фильтр;
	ДиалогОткрытияФайла.Заголовок          = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ТекущиеДанные.Данные = Новый ДвоичныеДанные(ДиалогОткрытияФайла.ПолноеИмяФайла);
		Файл = Новый Файл(ДиалогОткрытияФайла.ПолноеИмяФайла);
		ТекущиеДанные.Имя = ИмяПоПредставлению(Файл.ИмяБезРасширения) + "." + Расширение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВнешниеФайлыИмяОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ТаблицаВнешниеФайлы.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.Имя) Тогда
		Возврат
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.ТипФайла) Тогда
		ТекущиеДанные.ТипФайла = "Внешняя обработка"
	КонецЕсли;
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогОткрытияФайла.ПолноеИмяФайла = ТекущиеДанные.Имя;
	ДиалогОткрытияФайла.Заголовок      = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ТекущиеДанные.Данные.Записать(ДиалогОткрытияФайла.ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВнешниеФайлыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаВнешниеФайлы.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанные.Имя = "";
		ТекущиеДанные.Данные = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВнешниеФайлыПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаВнешниеФайлы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Элементы.ТаблицаВнешниеФайлыТипФайла.ТолькоПросмотр = Не ПустаяСтрока(ТекущиеДанные.Имя)
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ТаблицаЗначенияИмяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаЗначения.ТекущиеДанные;
	ТекущиеДанные.Имя = ИмяПоПредставлению(ТекущиеДанные.Имя);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ОбработчикиКомандФормыПолучитьДанные

&НаСервере
Процедура ПараметрыЗагрузкиДанныхНаСервере(ПараметрыЗагрузкиДанных)
	
	ПараметрыЗагрузкиДанных.Вставить("ТаблицаНомеровКолонок_Адрес",
									  ПоместитьВоВременноеХранилище(ЭтаФорма["ТаблицаНомеровКолонок"].Выгрузить(), ЭтаФорма.УникальныйИдентификатор));
									  
	// Чтение внешних макетов в структуру параметров
	ПараметрыЗагрузкиДанных.Вставить("Макеты", Новый Структура);

	ФайлМакет    = ПолучитьИмяВременногоФайла("mxl");
	Для Каждого СтрокаДанных Из ТаблицаВнешниеФайлы Цикл
		Если Прав(СтрокаДанных.Имя, 4) = ".mxl" Тогда
			Макет        = Новый ТабличныйДокумент;
			ДанныеМакета = СтрокаДанных.Данные;
			ДанныеМакета.Записать(ФайлМакет);
			Макет.Прочитать(      ФайлМакет);
			ПараметрыЗагрузкиДанных.Макеты.Вставить(СтрЗаменить(СтрокаДанных.Имя,".mxl",""), Макет);
		КонецЕсли;
	КонецЦикла;
	УдалитьФайлы(ФайлМакет);
									  
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанные_Обработка_МХЛ()
	
	//ХранилищеОН_СохранитьВсе(Истина);
	//ХранилищеОН_ВосстановитьВсе(Истина);
	
	Объект.ТаблицаДанныхExcelОбъект.Очистить();
	
	МаксНом = 0;
	Для Каждого ТекСтрока Из ТаблицаНомеровКолонок Цикл
		Если ТекСтрока.НомерКолонки > МаксНом Тогда
			МаксНом = ТекСтрока.НомерКолонки
		КонецЕсли;
	КонецЦикла;
	
	ПорцияДанных = Новый Массив;

	НомПП      = НомерНачало;
	НомППКонец = НомерКонец;
	
	НомерПоследний = ?(НомерКонец = 0, ТабДокОбъект.ВысотаТаблицы, НомерКонец);
	
	Пока Истина Цикл
		
		Если НомППКонец <> 0 Тогда
			Если НомПП > НомППКонец Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеИндикатора = (100 * НомПП/(НомерПоследний - НомерНачало + 1));
		
		ТекстСообщения = "Выполняется чтение данных листа "+ИмяЛиста+": №стр. " + НомПП;
		Состояние(ТекстСообщения, значениеИндикатора,, БиблиотекаКартинок.Провести);
		 
		ОбработкаПрерыванияПользователя();
		
		Excel_МассивДанных = Новый Массив;
		Для ж = 1 По МаксНом Цикл
			Excel_МассивДанных.Добавить(ТабДокОбъект.Область(НомПП, ж, НомПП, ж).Текст);
		КонецЦикла;
		
		Если ЭтоПустаяСтрока(Excel_МассивДанных) Тогда
			Если НомППКонец <> 0 Тогда
				НомПП = НомПП + 1;
				Продолжить;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура();
		Ном = 0;
		Для Каждого ТекЗначение Из Excel_МассивДанных Цикл
			Ном = Ном + 1;
			СтруктураСтроки.Вставить("Колонка" + Формат(Ном, "ЧЦ=3; ЧВН="), ТекЗначение);
		КонецЦикла;
		СтруктураСтроки.Вставить("__ИмяЛиста__", ИмяЛиста);
		ПорцияДанных.Добавить(СтруктураСтроки);
		
		Если ШагЧтенияДанных <> 0 И ПорцияДанных.Количество() = ШагЧтенияДанных Тогда
			ПолучитьДанныеExcelНаСервере(ПорцияДанных);
			ПорцияДанных.Очистить();
		КонецЕсли;
		
		НомПП = НомПП + 1;
		
	КонецЦикла;
	
	ПолучитьДанныеExcelНаСервере(ПорцияДанных);
	ПорцияДанных.Очистить();
	
	Если НЕ ПустаяСтрока(Алгоритм_ПослеЧтенияДанных) Тогда
		
		ПараметрыЧтенияДанных = ПослеЧтенияДанныхНаСервере();
		Для Каждого ТекОтчет Из ПараметрыЧтенияДанных.ОтчетыПослеЧтенияДанных Цикл
			Если ТекОтчет.Значение.ВысотаТаблицы > 0 Тогда
				ТекОтчет.Значение.Показать(ТекОтчет.Ключ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.СтраницыЧтениеЗагрузка.ТекущаяСтраница = Элементы.СтраницаВыводДанных;
	Элементы.СтраницыНастройки.ТекущаяСтраница = Элементы.СтраницаЧтениеЗагрузкаДанных;
	
	Если Настройки_СохранятьТаблицаДанныхExcel Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанные_Обработка()
	
	Если ТаблицаНомеровКолонок.Количество() = 0 Тогда
		Сообщить("Не заполнены строки таблицы ""Номера колонок"" ");
		Возврат
	КонецЕсли;
	
	ТаблицаДанныхExcelОбновить(Неопределено);
	
	Если РежимЧтенияДанных = "По макету" Тогда
		ПолучитьДанные_Обработка_МХЛ();
		Возврат
	КонецЕсли;
	
	//ХранилищеОН_СохранитьВсе(Истина);
	//ХранилищеОН_ВосстановитьВсе(Истина);
	
	Объект.ТаблицаДанныхExcelОбъект.Очистить();
	
	МаксНом = 0;
	Для Каждого ТекСтрока Из ТаблицаНомеровКолонок Цикл
		Если ТекСтрока.НомерКолонки > МаксНом Тогда
			МаксНом = ТекСтрока.НомерКолонки
		КонецЕсли;
	КонецЦикла;
	
	ПорцияДанных = Новый Массив;
	
	Excel         = Новый COMОбъект("Excel.Application");
	Excel.Visible = 0;
	Excel.DisplayAlerts = 0;
	Excel.WorkBooks.Open(ИмяФайлаЗагрузки);
	
	Если РежимЧтенияДанных = "Из Excel (несколько листов)" Тогда
		Листы = СписокЛистов
	Иначе
		Листы = Новый СписокЗначений;
		Листы.Добавить(ИмяЛиста,,Истина);
	КонецЕсли;
	
	Для Каждого ТекИмяЛиста Из Листы Цикл
		
		ИмяЛиста = ТекИмяЛиста.Значение;
		
		ExcelDoc = Excel.WorkSheets(ИмяЛиста);
		
		НомПП      = НомерНачало;
		НомППКонец = НомерКонец;
		
		Пока Истина Цикл
			
			Если НомППКонец <> 0 Тогда
				Если НомПП > НомППКонец Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если НомерКонец = 0 Тогда
				ЗначениеИндикатора = 100;
			Иначе
				ЗначениеИндикатора = (100 * НомПП/(НомерКонец - НомерНачало + 1));
			КонецЕсли;
			 
			ОбработкаПрерыванияПользователя();
			
			ТекстСообщения = "Выполняется чтение данных листа "+ИмяЛиста+": №стр. " + НомПП;
			Состояние(ТекстСообщения, значениеИндикатора,, БиблиотекаКартинок.Провести);
			
			ЯчейкаЛевая        = ExcelDoc.Cells(НомПП,       1);
			ЯчейкаПравая       = ExcelDoc.Cells(НомПП,       МаксНом);
			Excel_МассивДанных = ExcelDoc.Range(ЯчейкаЛевая, ЯчейкаПравая).Value;
			
			Если ЭтоПустаяСтрока(Excel_МассивДанных) Тогда
				Если НомППКонец <> 0 Тогда
					НомПП = НомПП + 1;
					Продолжить;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура();
			Для НомКол = 1 По МаксНом Цикл
				СтруктураСтроки.Вставить("Колонка" + Формат(НомКол, "ЧЦ=3; ЧВН="), ExcelDoc.Cells(НомПП, НомКол).Value);
			КонецЦикла;
			СтруктураСтроки.Вставить("__ИмяЛиста__", ИмяЛиста);
			ПорцияДанных.Добавить(СтруктураСтроки);
			
			Если ШагЧтенияДанных <> 0 И ПорцияДанных.Количество() = ШагЧтенияДанных Тогда
				ПолучитьДанныеExcelНаСервере(ПорцияДанных);
				ПорцияДанных.Очистить();
			КонецЕсли;
			
			НомПП = НомПП + 1;
			
		КонецЦикла;
	
	КонецЦикла;
	
	Excel.DisplayAlerts = 0;
	Excel.Quit();
	ExcelDoc = 0;
	Excel    = 0;
	
	ПолучитьДанныеExcelНаСервере(ПорцияДанных);
	ПорцияДанных.Очистить();
	
	Если НЕ ПустаяСтрока(Алгоритм_ПослеЧтенияДанных) Тогда
		
		ПараметрыЧтенияДанных = ПослеЧтенияДанныхНаСервере();
		Для Каждого ТекОтчет Из ПараметрыЧтенияДанных.ОтчетыПослеЧтенияДанных Цикл
			Если ТекОтчет.Значение.ВысотаТаблицы > 0 Тогда
				ТекОтчет.Значение.Показать(ТекОтчет.Ключ);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.СтраницыЧтениеЗагрузка.ТекущаяСтраница = Элементы.СтраницаВыводДанных;
	Элементы.СтраницыНастройки.ТекущаяСтраница = Элементы.СтраницаЧтениеЗагрузкаДанных;
	
	Если Настройки_СохранятьТаблицаДанныхExcel Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПустаяСтрока(МассивЯчеек)
	
	Для Каждого ТекЯчейка Из МассивЯчеек Цикл
		Если Не ПустаяСтрока(ТекЯчейка) Тогда
			Возврат Ложь
		КонецЕсли;
	КонецЦикла;

	Возврат Истина
КонецФункции

&НаСервере
Процедура ПолучитьДанныеExcelНаСервере(ПорцияДанных)
	
	ПараметрыЧтенияДанных = Новый Структура("Алгоритм_ПоискДанныхСтроки, УникальныйИдентификатор",
		Алгоритм_ПоискДанныхСтроки, УникальныйИдентификатор);
	
	ПараметрыЧтенияДанных.Вставить("ЗначенияДанных", Новый Структура);
	Для Каждого СтрокаДанных Из ТаблицаЗначения Цикл
		ПараметрыЧтенияДанных.ЗначенияДанных.Вставить(СтрокаДанных.Имя, СтрокаДанных.Значение);
	КонецЦикла;
	
	ПорцияДанныхОбработано = ОбъектОбработки().ПолучитьДанныеExcel(
		ПорцияДанных, ТаблицаНомеровКолонок.Выгрузить(), ПараметрыЧтенияДанных);
	
	Для Каждого ДанныеСтроки Из ПорцияДанныхОбработано Цикл
	
		//Если ПаузаСек <> 0 Тогда
		//	МенеджерОборудованияКлиент.Пауза(ПаузаСек);
		//КонецЕсли;
					
		НоваяСтрока = Объект.ТаблицаДанныхExcelОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		НоваяСтрока.Пометка = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПослеЧтенияДанныхНаСервере()
	
	ПараметрыЧтенияДанных = Новый Структура("Алгоритм_ПослеЧтенияДанных, УникальныйИдентификатор",
		Алгоритм_ПослеЧтенияДанных, УникальныйИдентификатор);
	ПараметрыЧтенияДанных.Вставить("ОтчетыПослеЧтенияДанных", Новый Структура);
	
	ПараметрыЧтенияДанных.Вставить("ТаблицаВнешниеФайлы_Адрес",
									  ПоместитьВоВременноеХранилище(ЭтаФорма["ТаблицаВнешниеФайлы"].Выгрузить(),
									  ЭтаФорма.УникальныйИдентификатор));
	
	ТаблицаДанныхExcelОбработано = ОбъектОбработки().ПослеЧтенияДанных(
		Объект.ТаблицаДанныхExcelОбъект.Выгрузить(), ТаблицаНомеровКолонок.Выгрузить(), ПараметрыЧтенияДанных);
		
	Объект.ТаблицаДанныхExcelОбъект.Очистить();
	Для Каждого ДанныеСтроки Из ТаблицаДанныхExcelОбработано Цикл
					
		НоваяСтрока = Объект.ТаблицаДанныхExcelОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
		НоваяСтрока.Пометка = Истина;
		
	КонецЦикла;
	
	Возврат ПараметрыЧтенияДанных
КонецФункции

#КонецОбласти

#Область ОбработчикиКомандФормыЗагрузитьДанные

&НаКлиенте
Функция ЗагрузитьДанные_Обработка()
	
	ПараметрыЗагрузкиДанных = ПараметрыЗагрузкиДанных();
	
	ЗагрузитьДанныеExcel_Основной(ПараметрыЗагрузкиДанных);
	
	Для Каждого ТекОтчет Из ПараметрыЗагрузкиДанных.ОтчетыПоЗагрузке Цикл
		Если ТекОтчет.Значение.ВысотаТаблицы > 0 Тогда
			ТекОтчет.Значение.Показать(ТекОтчет.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеExcel_Основной(ПараметрыЗагрузкиДанных)
	
	ПараметрыЗагрузкиДанных.НомерНачало = 1;
	
	КоличествоВсе = Объект.ТаблицаДанныхExcelОбъект.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество();
	
	Пока ПараметрыЗагрузкиДанных.НомерНачало <= КоличествоВсе Цикл
		
		Если ПараметрыЗагрузкиДанных.Шаг = 0 Тогда
			НомППКонец = КоличествоВсе
		Иначе
			НомППКонец = Мин(ПараметрыЗагрузкиДанных.НомерНачало + ПараметрыЗагрузкиДанных.Шаг - 1, КоличествоВсе);
		КонецЕсли;
		
		Если ЗагрузкаВТранзакции Тогда
			ОбработкаПрерыванияПользователя();
		КонецЕсли;
		
		ЗначениеИндикатора = (100 * ПараметрыЗагрузкиДанных.НомерНачало/КоличествоВсе);
		ТекстСообщения = "Загрузка: " + ПараметрыЗагрузкиДанных.НомерНачало + " - " + НомППКонец + " строки из " +КоличествоВсе+ " ...";
		Состояние(ТекстСообщения, значениеИндикатора,, БиблиотекаКартинок.Провести);
		
		//Если ПаузаСек <> 0 Тогда
		//	МенеджерОборудованияКлиент.Пауза(ПаузаСек);
		//КонецЕсли;
					
		ЗагрузитьДанныеExcel_ОсновнойНаСервере(ПараметрыЗагрузкиДанных);
		
		Если Не ПараметрыЗагрузкиДанных.СтандартнаяОбработка Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеExcel_ОсновнойНаСервере(ПараметрыЗагрузкиДанных)
	
	ТаблицаДанныхExcelОбъект = Объект.ТаблицаДанныхExcelОбъект.Выгрузить(Новый Структура("Пометка", Истина));
                                                
	ПараметрыЗагрузкиДанных.ТаблицаДанныхExcel_Адрес = ПоместитьВоВременноеХранилище(ТаблицаДанныхExcelОбъект,
		ПараметрыЗагрузкиДанных.УникальныйИдентификатор);
		
	ПараметрыЗагрузкиДанных.Вставить("ТаблицаВнешниеФайлы_Адрес",
									  ПоместитьВоВременноеХранилище(ЭтаФорма["ТаблицаВнешниеФайлы"].Выгрузить(),
									  ЭтаФорма.УникальныйИдентификатор));
		
	ОбъектОбработки().ЗагрузитьДанныеExcel(ПараметрыЗагрузкиДанных);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПолучитьДанные(Команда)
	
	Отказ = Ложь;
	
	Если РежимЧтенияДанных = "По макету" Тогда
		Если ПустаяСтрока(ИмяФайлаЗагрузкиМакет) Тогда
			Сообщить("Не указан идентификатор файла данных");
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
			Сообщить("Не указан файл excel для загрузки данных");
			Отказ = Истина;
		КонецЕсли;
		Если РежимЧтенияДанных = "Из Excel" И ПустаяСтрока(ИмяЛиста) Тогда
			Сообщить("Не указан лист excel для загрузки данных");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НомерНачало > НомерКонец И (НомерНачало <> 0 И НомерКонец <> 0) Тогда
		Сообщить("Некорректно заполнен интервал строк файла с-по");
		Отказ = Истина;
	ИначеЕсли (НомерНачало = 0 И НомерКонец = 0) Тогда
		Сообщить("Не заполнен интервал строк файла с-по");
		Отказ = Истина;
	КонецЕсли;
	Если Отказ Тогда Возврат КонецЕсли;
	
	Если Объект.ТаблицаДанныхExcelОбъект.Количество() > 0 Тогда
		ОписаниеЗавершения = Новый ОписаниеОповещения("ВопросЗавершение",
													  ЭтаФорма,
													  Новый Структура("Действие", "Заполнить"));
		ПоказатьВопрос(ОписаниеЗавершения, "Прочитать данные из файла/макета данных?", РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ПолучитьДанные_Обработка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	Если Объект.ТаблицаДанныхExcelОбъект.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Не выбраны строки для загрузки данных");
		Возврат
	КонецЕсли;
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ВопросЗавершение", ЭтаФорма, Новый Структура("Действие", "Загрузить"));
	ПоказатьВопрос(ОписаниеЗавершения, "Загрузить данные?", РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьExcel(Команда)
	
	Элементы.ИмяЛиста.СписокВыбора.Очистить();
	СписокЛистов.Очистить();
	
	Excel         = Новый COMОбъект("Excel.Application");
	Excel.Visible = 0;
	Excel.WorkBooks.Open(ИмяФайлаЗагрузки);
	
	Для й = 1 По Excel.WorkSheets.Count() Цикл
		Элементы.ИмяЛиста.СписокВыбора.Добавить(Excel.WorkSheets(й).Name);
		СписокЛистов.Добавить(Excel.WorkSheets(й).Name, , Истина);
	КонецЦикла;
	
	Excel.DisplayAlerts = 0;
	Excel.Quit();
	ExcelDoc = 0;
	Excel    = 0;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	ПометитьСнять(Команда, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	ПометитьСнять(Команда, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьСнять(Команда, Флаг)
	
	Если Элементы.ТаблицаДанныхExcelОбъект.ВыделенныеСтроки.Количество()<=1 Тогда
		Для Каждого ТекПодч Из Объект.ТаблицаДанныхExcelОбъект Цикл
			ТекПодч.Пометка = Флаг;
		КонецЦикла;
	Иначе
		// Выделен набор строк комбинацией клавиш "Ctrl-": обрабатываем только выделенные строки.
		Для Каждого Выделенная Из Элементы.ТаблицаДанныхExcelОбъект.ВыделенныеСтроки Цикл
			ТекПодч = Объект.ТаблицаДанныхExcelОбъект.НайтиПоИдентификатору(Выделенная);
			ТекПодч.Пометка = Флаг;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКолонки(Команда)
	
	КлючНастроек = "ТаблицаНомеровКолонок_" + ЭтаФорма.КлючНастроекОсновной;
	
	Режим  = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = КлючНастроек;
	Фильтр = "Файл XML(*.xml)|*.xml";
	ДиалогОткрытияФайла.Фильтр             = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок          = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ТекстФ = Новый ТекстовыйДокумент;
		ТекстФ.УстановитьТекст(СериализоватьОбъектФормыНаСервере("ТаблицаНомеровКолонок"));
		ТекстФ.Записать(ДиалогОткрытияФайла.ПолноеИмяФайла);
		Сообщить("Выгружены номера колонок "+ТаблицаНомеровКолонок.Количество()+" строк");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьКолонки(Команда)
	
	КлючНастроек = "ТаблицаНомеровКолонок_" + ЭтаФорма.КлючНастроекОсновной;
	
	Режим  = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = КлючНастроек;
	Фильтр = "Файл XML(*.xml)|*.xml";
	ДиалогОткрытияФайла.Фильтр             = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок          = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		ТекстФ = Новый ТекстовыйДокумент;
		ТекстФ.Прочитать(ДиалогОткрытияФайла.ПолноеИмяФайла);
		
		ДеСериализоватьОбъектФормыНаСервере(ТекстФ.ПолучитьТекст(), "ТаблицаНомеровКолонок");
		Сообщить("Загружены номера колонок "+ТаблицаНомеровКолонок.Количество()+" строк");
		
		ОбновитьТаблицаНомеровКолонокНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАлгоритм(Команда)
	ОткрытьФорму("ВнешняяОбработка.ЗагрузкаИзExcel.Форма.ФормаАлгоритм", Новый Структура("АлгоритмИмя", Команда.Имя),
		ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца)
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКаталогаАлгоритмы(Команда)
	
	Режим  = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок          = "Выберите каталог";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ЗагрузитьИзКаталогаАлгоритмыОбработка(ДиалогОткрытияФайла.Каталог);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВКаталогАлгоритмы(Команда)
	
	Режим  = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок          = "Выберите каталог";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		СохранитьВКаталогАлгоритмыОбработка(ДиалогОткрытияФайла.Каталог)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКаталогаВнешниеФайлы(Команда)
	
	Режим  = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок          = "Выберите каталог";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ЗагрузитьИзКаталогаВнешниеФайлыОбработка(ДиалогОткрытияФайла.Каталог)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВКаталогВнешниеФайлы(Команда)
	
	Режим  = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок          = "Выберите каталог";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		СохранитьВКаталогВнешниеФайлыОбработка(ДиалогОткрытияФайла.Каталог)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьЗначенияДанных(Команда)
	
	КлючНастроек = "ТаблицаПараметры_" + ЭтаФорма.КлючНастроекОсновной;
	
	Режим  = РежимДиалогаВыбораФайла.Сохранение;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = КлючНастроек;
	Фильтр = "Файл XML(*.xml)|*.xml";
	ДиалогОткрытияФайла.Фильтр             = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок          = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ТекстФ = Новый ТекстовыйДокумент;
		ТекстФ.УстановитьТекст(СериализоватьОбъектФормыНаСервере("ТаблицаЗначения"));
		ТекстФ.Записать(ДиалогОткрытияФайла.ПолноеИмяФайла);
		Сообщить("Выгружены значения данных "+ТаблицаЗначения.Количество()+" строк");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьЗначенияДанных(Команда)
	
	КлючНастроек = "ТаблицаПараметры_" + ЭтаФорма.КлючНастроекОсновной;
	
	Режим  = РежимДиалогаВыбораФайла.Открытие;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.ПолноеИмяФайла = КлючНастроек;
	Фильтр = "Файл XML(*.xml)|*.xml";
	ДиалогОткрытияФайла.Фильтр             = Фильтр;
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок          = "Выберите файл";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ТекстФ = Новый ТекстовыйДокумент;
		ТекстФ.Прочитать(ДиалогОткрытияФайла.ПолноеИмяФайла);
		ДеСериализоватьОбъектФормыНаСервере(ТекстФ.ПолучитьТекст(), "ТаблицаЗначения");
		Сообщить("Загружены значения данных "+ТаблицаЗначения.Количество()+" строк");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьВсеНастройки(Команда)
	
	Если ПустаяСтрока(ЭтаФорма.КлючНастроекОсновной) Тогда
		Сообщить("Не указан файл excel/источник данных");
		Возврат
	КонецЕсли;
	
	Режим  = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок          = "Выберите каталог";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		ВосстановитьВсеНастройкиОбработка(ЭтаФорма.КлючНастроекОсновной, ДиалогОткрытияФайла.Каталог);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсторияВосстановитьВсеНастройки(Команда)
	
	СохранениеНастройкиДиалог(Ложь, "ТаблицаИсторияВосстановитьВсеНастройки")
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьВсеНастройкиОбработка(КлючНастроекОсновнойПараметр, Каталог)

	ФайлыНайденыВКаталоге = Ложь;
	
	КлючНастроек = "НастройкиФормыОбщие_" + КлючНастроекОсновнойПараметр + ".xml";
	ТекстФ = Новый ТекстовыйДокумент;
	Файл = Новый файл(Каталог +"\"+ КлючНастроек);
	Если Файл.Существует() Тогда
		ТекстФ.Прочитать(Каталог +"\"+ КлючНастроек);
		ДеСериализоватьОбъектФормыНаСервере(ТекстФ.ПолучитьТекст(), "НастройкиФормыОбщие");
		Сообщить("Загружены значения данных "+ТаблицаЗначения.Количество()+" строк");
		ФайлыНайденыВКаталоге = Истина;
	Иначе
		Сообщить("Файл "+Файл.ПолноеИмя+" не найден");
	КонецЕсли;
	
	КлючНастроек = "ТаблицаПараметры_" + КлючНастроекОсновнойПараметр + ".xml";
	ТекстФ = Новый ТекстовыйДокумент;
	Файл = Новый файл(Каталог +"\"+ КлючНастроек);
	Если Файл.Существует() Тогда
		ТекстФ.Прочитать(Каталог +"\"+ КлючНастроек);
		ДеСериализоватьОбъектФормыНаСервере(ТекстФ.ПолучитьТекст(), "ТаблицаЗначения");
		Сообщить("Загружены значения данных "+ТаблицаЗначения.Количество()+" строк");
		ФайлыНайденыВКаталоге = Истина;
	Иначе
		Сообщить("Файл "+Файл.ПолноеИмя+" не найден");
	КонецЕсли;
	
	КлючНастроек = "ТаблицаНомеровКолонок_" + КлючНастроекОсновнойПараметр + ".xml";
	Файл = Новый файл(Каталог +"\"+ КлючНастроек);
	Если Файл.Существует() Тогда
		ТекстФ = Новый ТекстовыйДокумент;
		ТекстФ.Прочитать(Каталог +"\"+ КлючНастроек);
		ДеСериализоватьОбъектФормыНаСервере(ТекстФ.ПолучитьТекст(), "ТаблицаНомеровКолонок");
		Сообщить("Загружены номера колонок "+ТаблицаНомеровКолонок.Количество()+" строк");
		ФайлыНайденыВКаталоге = Истина;
	Иначе
		Сообщить("Файл "+Файл.ПолноеИмя+" не найден");
	КонецЕсли;
	
	//ЗагрузитьИзКаталогаВнешниеФайлыОбработка(ДиалогОткрытияФайла.Каталог);
	ЗагрузитьИзКаталогаАлгоритмыОбработка(Каталог);
	ЗагрузитьИзКаталогаВнешниеФайлыОбработка(Каталог);
	
	Если Настройки_СохранятьТаблицаДанныхExcel Тогда
		ДополнительныеПараметры = Новый Структура;
		КлючНастроек = "ТаблицаДанныхExcel_" + КлючНастроекОсновнойПараметр + ".txt";
		ТекстДок = Новый ТекстовыйДокумент;
		Файл = Новый файл(Каталог +"\"+ КлючНастроек);
		Если Файл.Существует() Тогда
			ТекстДок.Прочитать(Каталог +"\"+ КлючНастроек);
			ТаблицаДанныхExcelЗагрузитьИзТекстаОбработка(ТекстДок.ПолучитьТекст(), ДополнительныеПараметры);
			Если ДополнительныеПараметры.ТекстОшибки = "" Тогда
				Сообщить("Загружена таблица данных");
				ФайлыНайденыВКаталоге = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ЭтаФорма.Параметры.КлючНастроекОсновной) И ФайлыНайденыВКаталоге Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеНастройки(Команда)
	
	Если ПустаяСтрока(ЭтаФорма.КлючНастроекОсновной) Тогда
		Сообщить("Не указан файл excel/источник данных");
		Возврат
	КонецЕсли;
	
	Режим  = РежимДиалогаВыбораФайла.ВыборКаталога;
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
	ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
	ДиалогОткрытияФайла.Заголовок          = "Выберите каталог";
	Если ДиалогОткрытияФайла.Выбрать() Тогда
		
		СохранитьВсеНастройкиОбработка(ЭтаФорма.КлючНастроекОсновной, ДиалогОткрытияФайла.Каталог);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсторияСохранитьВсеНастройки(Команда)
	
	СохранениеНастройкиДиалог(Ложь, "ТаблицаИсторияСохранитьВсеНастройки")
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеОН_СохранитьВсеБД(Команда)
	ХранилищеОН_СохранитьВсе(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьВсеНастройкиХранилищеБД(Команда)
	ХранилищеОН_ВосстановитьВсе();
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВсеНастройкиХранилищеБД(Команда)
	ХранилищеОН_СохранитьВсе();
	Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НоваяНастройка(Команда)
	
	//Оповещение = Новый ОписаниеОповещения("НоваяНастройкаОбработка", ЭтаФорма, Новый Структура);
	//ПоказатьВопрос(Оповещение, НСтр("ru = 'Создать новую настройку данных?';"
	//    + " en = 'Do you want to continue?'"), РежимДиалогаВопрос.ДаНет, 0);

	СохранениеНастройкиДиалог(Ложь, "НоваяНастройка")
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсторияПоказатьСкрыть(Команда)
	
	Элементы.ФормаТаблицаИсторияПоказатьСкрыть.Пометка = НЕ Элементы.ФормаТаблицаИсторияПоказатьСкрыть.Пометка;

	Если Элементы.ФормаТаблицаИсторияПоказатьСкрыть.Пометка Тогда
		Элементы.ФормаТаблицаИсторияПоказатьСкрыть.Заголовок = "История данных: скрыть";
		Элементы.ТаблицаИстория.Видимость = Истина;
	Иначе
		Элементы.ФормаТаблицаИсторияПоказатьСкрыть.Заголовок = "История данных: показать";
		Элементы.ТаблицаИстория.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсторияВыбрать(Команда)
	
	Если Элементы.ТаблицаИстория.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СохранениеНастройкиДиалог(Ложь, "ТаблицаИсторияВыбрать")
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсторияСкопировать(Команда)
	
	Если Элементы.ТаблицаИстория.ТекущиеДанные = Неопределено Тогда
		Сообщить("Не указана настройка для копирования");
		Возврат
	КонецЕсли;
	
	КлючНастроекИсточник = Элементы.ТаблицаИстория.ТекущиеДанные.КлючНастроек;
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ВопросЗавершение",
												  ЭтаФорма,
												  Новый Структура("Действие,Событие, КлючНастроекИсточник",
												  	"КлючНастроекОсновнойНачалоВыбора","ТаблицаИсторияСкопировать", КлючНастроекИсточник));
	ПоказатьВопрос(ОписаниеЗавершения, "Скопировать настройку?", РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсторияПереименовать(Команда)
	
	Если Элементы.ТаблицаИстория.ТекущиеДанные = Неопределено Тогда
		Сообщить("Не указана настройка для копирования");
		Возврат
	КонецЕсли;
	
	ОписаниеЗавершения = Новый ОписаниеОповещения("ПослеВводаСтроки",
												  ЭтаФорма,
												  Новый Структура("Действие,Событие", "КлючНастроекОсновнойНачалоВыбора","ТаблицаИсторияПереименовать"));
	ПоказатьВводСтроки(ОписаниеЗавершения, Элементы.ТаблицаИстория.ТекущиеДанные.КлючНастроек , "Имя настройки?", 99);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсторияУдалить(Команда)
	
	Если Элементы.ТаблицаИстория.ТекущиеДанные = Неопределено Тогда
		Сообщить("Не выбрана строка");
		Возврат
	КонецЕсли;

	ОписаниеЗавершения = Новый ОписаниеОповещения("ВопросЗавершение",
												  ЭтаФорма,
												  Новый Структура("Действие", "ТаблицаИсторияУдалить"));
	ПоказатьВопрос(ОписаниеЗавершения, "Удалить настройку?", РежимДиалогаВопрос.ОКОтмена);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОбъектОбработки()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	ОбновитьКолАлгоритмов();
	
	Элементы.СтраницаМакетДанных.Видимость = (РежимЧтенияДанных = "По макету");
	Элементы.ГруппаExcel.Видимость    = (РежимЧтенияДанных <> "По макету");
	Элементы.ГруппаПоМакету.Видимость = (РежимЧтенияДанных = "По макету");
	
	Элементы.ИмяЛиста.Видимость 	= (РежимЧтенияДанных = "Из Excel");
	Элементы.СписокЛистов.Видимость = (РежимЧтенияДанных = "Из Excel (несколько листов)");
	
	Элементы.ТестоваяЗагрузка.Видимость = (ЗагрузкаВТранзакции);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыЗагрузкиДанных()
	
	ПараметрыЗагрузкиДанных = Новый Структура(
		"ТаблицаДанныхExcel_Адрес,НомерНачало,Шаг,ВТранзакции,ТестоваяЗагрузка,
		|УникальныйИдентификатор,ЭтоНачальнаяИтерация,СтандартнаяОбработка,Отказ,
		|ОтчетыПоЗагрузке,ТаблицаНомеровКолонок_Адрес,ТаблицаВнешниеФайлы_Адрес,Макеты,
		|" + Параметры.АлгоритмыСтрокой,
		Неопределено,
		0,
		?(ШагЗагрузкиДанных = 0 ,Объект.ТаблицаДанныхExcelОбъект.Количество(),ШагЗагрузкиДанных), ЗагрузкаВТранзакции, ТестоваяЗагрузка,
		ЭтаФорма.УникальныйИдентификатор, Истина, Истина, Ложь,
		Новый Соответствие, "", "", Новый Структура,
		Алгоритм_ПоискДанныхСтроки, Алгоритм_ПослеЧтенияДанных, Алгоритм_ЗагрузкаДанныхСтроки, Алгоритм_ПередЗагрузкойДанных);
		
	Если ПустаяСтрока(Алгоритм_ЗагрузкаДанныхСтроки) Тогда
		// Загрузка данных НЕ построчная, а спец.алгоритмом. Шаг итерации делаем на всю таблицу данных. 
		ПараметрыЗагрузкиДанных.Шаг = Объект.ТаблицаДанныхExcelОбъект.Количество();
	КонецЕсли;
		
	ПараметрыЗагрузкиДанных.Вставить("ЗначенияДанных", Новый Структура);
	Для Каждого СтрокаДанных Из ТаблицаЗначения Цикл
		ПараметрыЗагрузкиДанных.ЗначенияДанных.Вставить(СтрокаДанных.Имя, СтрокаДанных.Значение);
	КонецЦикла;
	
	ПараметрыЗагрузкиДанныхНаСервере(ПараметрыЗагрузкиДанных);
	
	Возврат ПараметрыЗагрузкиДанных
КонецФункции

&НаКлиенте
Процедура СохранитьВсеНастройкиОбработка(КлючНастроекОсновнойПараметр, Каталог)
	
	Значение = НастройкиФормыОбщиеНаСервере();
	КлючНастроек = "НастройкиФормыОбщие_" + КлючНастроекОсновнойПараметр + ".xml";
	ТекстФ = Новый ТекстовыйДокумент;
	ТекстФ.УстановитьТекст(СериализоватьОбъектФормыНаСервере("НастройкиФормыОбщие"));
	ТекстФ.Записать(Каталог +"\"+ КлючНастроек);
	Сообщить("Выгружены общие данные формы");
	
	КлючНастроек = "ТаблицаПараметры_" + КлючНастроекОсновнойПараметр + ".xml";
	ТекстФ = Новый ТекстовыйДокумент;
	ТекстФ.УстановитьТекст(СериализоватьОбъектФормыНаСервере("ТаблицаЗначения"));
	ТекстФ.Записать(Каталог +"\"+ КлючНастроек);
	Сообщить("Выгружены значения данных "+ТаблицаЗначения.Количество()+" строк");
	
	КлючНастроек = "ТаблицаНомеровКолонок_" + КлючНастроекОсновнойПараметр + ".xml";
	ТекстФ = Новый ТекстовыйДокумент;
	ТекстФ.УстановитьТекст(СериализоватьОбъектФормыНаСервере("ТаблицаНомеровКолонок"));
	ТекстФ.Записать(Каталог +"\"+ КлючНастроек);
	Сообщить("Выгружены номера колонок "+ТаблицаНомеровКолонок.Количество()+" строк");
	
	//СохранитьВКаталогВнешниеФайлыОбработка(Каталог);
	СохранитьВКаталогАлгоритмыОбработка(Каталог);
	
	Если РежимЧтенияДанных = "По макету" И ТабДокОбъект.ВысотаТаблицы > 0 Тогда
		КлючНастроек = КлючНастроекОсновнойПараметр + ".mxl";
		ТабДокОбъект.Записать(Каталог +"\"+ КлючНастроек);
		Сообщить("Выгружен макет данных");
	КонецЕсли;
	
	Если Настройки_СохранятьТаблицаДанныхExcel Тогда
		КлючНастроек = "ТаблицаДанныхExcel_" + КлючНастроекОсновнойПараметр + ".txt";
		Текст = ТаблицаДанныхExcelОтладкаТаблицаНаСервере(Ложь);
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.УстановитьТекст(Текст);
		ТекстДок.Записать(Каталог +"\"+ КлючНастроек);
		Сообщить("Выгружена таблица данных");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеОН_СохранитьВсеНаСервере(ЭтоПолучениеДанных, КлючНастроекПараметр, ОписаниеНастройки)
	
	ОбъектОбработка = ОбъектОбработки();
	ИмяОбработки = ОбъектОбработка.Метаданные().Имя;

	// Сохраняем имя ключа и дату изменений
	КлючНастроек = "Имя_" + КлючНастроекПараметр;
	ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроек, Новый Структура("ДатаЗаписи,Описание", ТекущаяДата(),ОписаниеНастройки));
	
	// Сохраняем интервалы строк
	КлючНастроек = "НастройкиФормыОбщие_" + КлючНастроекПараметр;
	Значение = НастройкиФормыОбщиеНаСервере();
	ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроек, Значение);
	
	// Сохраняем номера колонок с таблицы на форме.
	КлючНастроек = "ТаблицаНомеровКолонок_" + КлючНастроекПараметр;
	ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроек, ТаблицаНомеровКолонок.Выгрузить());
	
	// Сохраняем фиксированные параметры.
	КлючНастроек = "ТаблицаПараметры_" + КлючНастроекПараметр;
	ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроек, ТаблицаЗначения.Выгрузить());
	
	// Сохраняем тексты алгоритмов загрузки
	Для Каждого ТекАлгоритм Из РазложитьСтрокуВМассивПодстрок(Параметры.АлгоритмыСтрокой) Цикл
		КлючНастроек = ТекАлгоритм + "_" + КлючНастроекПараметр;
		ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроек, ЭтаФорма[ТекАлгоритм]);
	КонецЦикла;
	
	// Сохраняем прикрепленные внешние обработки
	КлючНастроек = "ТаблицаВнешниеФайлы_" + КлючНастроекПараметр;
	ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроек, ТаблицаВнешниеФайлы.Выгрузить());
	
	Если НЕ ЭтоПолучениеДанных Тогда
		
		Если РежимЧтенияДанных = "По макету" Тогда
			ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, "ТабДок_" + КлючНастроекПараметр, ТабДокОбъект);
		Иначе
			ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, "ИмяЛистаСписокВыбора_" + КлючНастроекПараметр, Элементы.ИмяЛиста.СписокВыбора.ВыгрузитьЗначения());
		КонецЕсли;
		
		Если Настройки_СохранятьТаблицаДанныхExcel Тогда
			ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, "ТаблицаДанныхExcel_" + КлючНастроекПараметр, Объект.ТаблицаДанныхExcelОбъект.Выгрузить());
		Иначе
			ХранилищеОбщихНастроек.Удалить(ИмяОбработки, "ТаблицаДанныхExcel_" + КлючНастроекПараметр, Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ХранилищеОН_ВосстановитьВсеНаСервере(ЭтоПолучениеДанных, КлючНастроекПараметр, НеВосстанавливатьОбщие = Ложь)
	
	НайденыСохранныеНастройки = Ложь;
	
	ОбъектОбработка = ОбъектОбработки();
	ИмяОбработки = ОбъектОбработка.Метаданные().Имя;
	
	// Читаем интервалы строк
	КлючНастроек = "НастройкиФормыОбщие_" + КлючНастроекПараметр;
	ЗначениеОбщие = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроек);
	Если ТипЗнч(ЗначениеОбщие) = Тип("Структура") Тогда
		Если НЕ НеВосстанавливатьОбщие Тогда
			ЗаполнитьЗначенияСвойств(ЭтаФорма, ЗначениеОбщие);
		КонецЕсли;
		НайденыСохранныеНастройки = Истина;
	КонецЕсли;
	
	// Читаем номера колонок в таблицу на форме
	КлючНастроек = "ТаблицаНомеровКолонок_" + КлючНастроекПараметр;
	ЗначениеТаблицаНомеровКолонок = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроек);
	Если ТипЗнч(ЗначениеТаблицаНомеровКолонок) = Тип("ТаблицаЗначений") Тогда
		
		ТаблицаНомеровКолонок.Загрузить(ЗначениеТаблицаНомеровКолонок);
		ОбъектОбработка.ОбновитьПредставленияОписанияТипов(ТаблицаНомеровКолонок);

	КонецЕсли;
	
	// Читаем тексты алгоритмов загрузки.
	Для Каждого ТекАлгоритм Из РазложитьСтрокуВМассивПодстрок(Параметры.АлгоритмыСтрокой) Цикл
		КлючНастроек = ТекАлгоритм + "_" + КлючНастроекПараметр;
		ЭтаФорма[ТекАлгоритм] = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроек);
	КонецЦикла;
	
	// Читаем прикрепленные внешние обработки.
	КлючНастроек = "ТаблицаВнешниеФайлы_" + КлючНастроекПараметр;
	ЗначениеТаблицаВнешниеФайлы = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроек);
	Если ТипЗнч(ЗначениеТаблицаВнешниеФайлы) = Тип("ТаблицаЗначений") Тогда
		ТаблицаВнешниеФайлы.Загрузить(ЗначениеТаблицаВнешниеФайлы);
	КонецЕсли;
	
	// Читаем фиксированные параметры.
	КлючНастроек = "ТаблицаПараметры_" + КлючНастроекПараметр;
	ЗначениеТаблицаЗначения = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроек);
	Если ТипЗнч(ЗначениеТаблицаЗначения) = Тип("ТаблицаЗначений") Тогда
		ТаблицаЗначения.Загрузить(ЗначениеТаблицаЗначения);
	КонецЕсли;
	
	// Устанавливаем колонки по таблице колонок.
	ТаблицаДанныхExcelОбновитьНаСервере();
	
	Если НЕ ЭтоПолучениеДанных Тогда
		
		Если РежимЧтенияДанных = "По макету" Тогда
			ТабДок1 = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, "ТабДок_" + КлючНастроекПараметр);
			Если ТипЗнч(ТабДок1) = Тип("ТабличныйДокумент") Тогда
				ТабДокОбъект.Очистить();
				ТабДокОбъект.Вывести(ТабДок1);
			КонецЕсли;
		Иначе
			ИмяЛистаСписокВыбора = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, "ИмяЛистаСписокВыбора_" + КлючНастроекПараметр);
			Если ТипЗнч(ИмяЛистаСписокВыбора) = Тип("Массив") Тогда
				Элементы.ИмяЛиста.СписокВыбора.ЗагрузитьЗначения(ИмяЛистаСписокВыбора);
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки_СохранятьТаблицаДанныхExcel Тогда
			
			ТаблицаДанныхExcel1 = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, "ТаблицаДанныхExcel_" + КлючНастроекПараметр);
			Если ТипЗнч(ТаблицаДанныхExcel1) = Тип("ТаблицаЗначений") Тогда
				Объект.ТаблицаДанныхExcelОбъект.Очистить();
				Для Каждого ДанныеСтроки Из ТаблицаДанныхExcel1 Цикл
					ЗаполнитьЗначенияСвойств(Объект.ТаблицаДанныхExcelОбъект.Добавить(), ДанныеСтроки)
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НайденыСохранныеНастройки;
	
КонецФункции

&НаСервере
Процедура ХранилищеОН_УдалитьВсеНаСервере(КлючНастроекПараметр)
	
	ОбъектОбработка = ОбъектОбработки();
	ИмяОбработки = ОбъектОбработка.Метаданные().Имя;

	// Сохраняем имя ключа и дату изменений
	КлючНастроек = "Имя_" + КлючНастроекПараметр;
	ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроек, Неопределено);
	
	// Сохраняем интервалы строк
	КлючНастроек = "НастройкиФормыОбщие_" + КлючНастроекПараметр;
	ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроек, Неопределено);
	
	// Сохраняем номера колонок с таблицы на форме.
	КлючНастроек = "ТаблицаНомеровКолонок_" + КлючНастроекПараметр;
	ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроек, Неопределено);
	
	// Сохраняем фиксированные параметры.
	КлючНастроек = "ТаблицаПараметры_" + КлючНастроекПараметр;
	ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроек, Неопределено);
	
	// Сохраняем тексты алгоритмов загрузки
	Для Каждого ТекАлгоритм Из РазложитьСтрокуВМассивПодстрок(Параметры.АлгоритмыСтрокой) Цикл
		КлючНастроек = ТекАлгоритм + "_" + КлючНастроекПараметр;
		ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроек, Неопределено);
	КонецЦикла;
	
	// Сохраняем прикрепленные внешние обработки
	КлючНастроек = "ТаблицаВнешниеФайлы_" + КлючНастроекПараметр;
	ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроек, Неопределено);
	
	ХранилищеОбщихНастроек.Удалить(ИмяОбработки, "ТабДок_" + КлючНастроекПараметр, Неопределено);
	ХранилищеОбщихНастроек.Удалить(ИмяОбработки, "ИмяЛистаСписокВыбора_" + КлючНастроекПараметр, Неопределено);
	
	ХранилищеОбщихНастроек.Удалить(ИмяОбработки, "ТаблицаДанныхExcel_" + КлючНастроекПараметр, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ХранилищеОН_СкопироватьПереименоватьВсеНаСервере(КлючНастроекПараметрИсточник, КлючНастроекПараметрПриемник, Переименовать)
	
	ОбъектОбработка = ОбъектОбработки();
	ИмяОбработки = ОбъектОбработка.Метаданные().Имя;
	
	КлючНастроекИсточник = "Имя_" + КлючНастроекПараметрИсточник;
	КлючНастроекПриемник = "Имя_" + КлючНастроекПараметрПриемник;
	ЗначениеОбщие = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроекИсточник);
	ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроекПриемник, ЗначениеОбщие);
	Если Переименовать Тогда
		ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроекИсточник, Неопределено);
	КонецЕсли;
	
	// Читаем интервалы строк
	КлючНастроекИсточник = "НастройкиФормыОбщие_" + КлючНастроекПараметрИсточник;
	КлючНастроекПриемник = "НастройкиФормыОбщие_" + КлючНастроекПараметрПриемник;
	ЗначениеОбщие = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроекИсточник);
	Если ТипЗнч(ЗначениеОбщие) = Тип("Структура") Тогда
		ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроекПриемник, ЗначениеОбщие);
		Если Переименовать Тогда
			ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроекИсточник, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	// Читаем номера колонок в таблицу на форме
	КлючНастроекИсточник = "ТаблицаНомеровКолонок_" + КлючНастроекПараметрИсточник;
	КлючНастроекПриемник = "ТаблицаНомеровКолонок_" + КлючНастроекПараметрПриемник;
	ЗначениеТаблицаНомеровКолонок = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроекИсточник);
	Если ТипЗнч(ЗначениеТаблицаНомеровКолонок) = Тип("ТаблицаЗначений") Тогда
		ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроекПриемник, ЗначениеТаблицаНомеровКолонок);
		Если Переименовать Тогда
			ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроекИсточник, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	// Читаем тексты алгоритмов загрузки.
	Для Каждого ТекАлгоритм Из РазложитьСтрокуВМассивПодстрок(Параметры.АлгоритмыСтрокой) Цикл
		КлючНастроекИсточник = ТекАлгоритм + "_" + КлючНастроекПараметрИсточник;
		КлючНастроекПриемник = ТекАлгоритм + "_" + КлючНастроекПараметрПриемник;
		ТекЗначение = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроекИсточник);
		ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроекПриемник, ТекЗначение);
		Если Переименовать Тогда
			ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроекИсточник, Неопределено);
		КонецЕсли;
	КонецЦикла;
	
	// Читаем прикрепленные внешние обработки.
	КлючНастроекИсточник = "ТаблицаВнешниеФайлы_" + КлючНастроекПараметрИсточник;
	КлючНастроекПриемник = "ТаблицаВнешниеФайлы_" + КлючНастроекПараметрПриемник;
	ЗначениеТаблицаВнешниеФайлы = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроекИсточник);
	Если ТипЗнч(ЗначениеТаблицаВнешниеФайлы) = Тип("ТаблицаЗначений") Тогда
		ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроекПриемник, ЗначениеТаблицаВнешниеФайлы);
		Если Переименовать Тогда
			ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроекИсточник, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	// Читаем фиксированные параметры.
	КлючНастроекИсточник = "ТаблицаПараметры_" + КлючНастроекПараметрИсточник;
	КлючНастроекПриемник = "ТаблицаПараметры_" + КлючНастроекПараметрПриемник;
	ЗначениеТаблицаЗначения = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроекИсточник);
	Если ТипЗнч(ЗначениеТаблицаЗначения) = Тип("ТаблицаЗначений") Тогда
		ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроекПриемник, ЗначениеТаблицаЗначения);
		Если Переименовать Тогда
			ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроекИсточник, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	КлючНастроекИсточник = "ТабДок_" + КлючНастроекПараметрИсточник;
	КлючНастроекПриемник = "ТабДок_" + КлючНастроекПараметрПриемник;
	ТабДок1 = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроекИсточник);
	Если ТипЗнч(ТабДок1) = Тип("ТабличныйДокумент") Тогда
		ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроекПриемник, ТабДок1);
		Если Переименовать Тогда
			ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроекИсточник, Неопределено);
		КонецЕсли;
	КонецЕсли;

	КлючНастроекИсточник = "ИмяЛистаСписокВыбора_" + КлючНастроекПараметрИсточник;
	КлючНастроекПриемник = "ИмяЛистаСписокВыбора_" + КлючНастроекПараметрПриемник;
	ИмяЛистаСписокВыбора = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, КлючНастроекИсточник);
	Если ТипЗнч(ИмяЛистаСписокВыбора) = Тип("Массив") Тогда
		ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроекПриемник, ИмяЛистаСписокВыбора);
		Если Переименовать Тогда
			ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроекИсточник, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	КлючНастроекИсточник = "ТаблицаДанныхExcel_" + КлючНастроекПараметрИсточник;
	КлючНастроекПриемник = "ТаблицаДанныхExcel_" + КлючНастроекПараметрПриемник;
	ТаблицаДанныхExcel1 = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, "ТаблицаДанныхExcel_" + КлючНастроекПараметрИсточник);
	Если ТипЗнч(ТаблицаДанныхExcel1) = Тип("ТаблицаЗначений") Тогда
		ХранилищеОбщихНастроек.Сохранить(ИмяОбработки, КлючНастроекПриемник, ТаблицаДанныхExcel1);
		Если Переименовать Тогда
			ХранилищеОбщихНастроек.Удалить(ИмяОбработки, КлючНастроекИсточник, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаИсторияОбновитьНаСервере()
	
	ОбъектОбработка = ОбъектОбработки();
	
	ТаблицаИстория.Очистить();
	ИмяОбработки = ОбъектОбработка.Метаданные().Имя;
	Для Каждого ТекЭлемент Из ХранилищеОбщихНастроек.ПолучитьСписок(ИмяОбработки) Цикл
		Если СтрНачинаетсяС(ТекЭлемент.Значение, "Имя_") Тогда
			ТекЗначение = ХранилищеОбщихНастроек.Загрузить(ИмяОбработки, ТекЭлемент.Значение);
			НоваяСтрока = ТаблицаИстория.Добавить();
			НоваяСтрока.КлючНастроек  = Сред(ТекЭлемент.Значение, 5);
			НоваяСтрока.ДатаЗаписи    = ТекЗначение.ДатаЗаписи;
			НоваяСтрока.Описание	  = ТекЗначение.Описание;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранениеНастройкиДиалог(Отказ, Событие)

	Если Модифицированность Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Изменили существующую настройку, либо делали новую и пытались закрыть окно
	Если Модифицированность И (
		  Не ПустаяСтрока(Параметры.КлючНастроекОсновной)
		  ИЛИ НЕ ПустаяСтрока(КлючНастроекОсновной)
		 ) Тогда
		ОписаниеЗавершения = Новый ОписаниеОповещения("ВопросЗавершение",
													  ЭтаФорма,
													  Новый Структура("Действие,Событие", "КлючНастроекОсновнойНачалоВыбора",Событие));
		ПоказатьВопрос(ОписаниеЗавершения, "Настройка была изменена. Сохранить изменения в БД?", РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ВопросЗавершение(КодВозвратаДиалога.Нет, Новый Структура("Действие,Событие", "КлючНастроекОсновнойНачалоВыбора",Событие))
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиФормыОбщиеНаСервере()

	Значение = Новый Структура("НомерНачало,НомерКонец,РежимЧтенияДанных",
		НомерНачало,НомерКонец,РежимЧтенияДанных);
		
	Значение.Вставить("Настройки_СохранятьТаблицаДанныхExcel", Настройки_СохранятьТаблицаДанныхExcel);
	
	Если РежимЧтенияДанных = "По макету" Тогда
		Значение.Вставить("ИмяФайлаЗагрузкиМакет", СокрЛП(ИмяФайлаЗагрузкиМакет));
		
	ИначеЕсли РежимЧтенияДанных = "Из Excel (несколько листов)" Тогда
		Значение.Вставить("ИмяФайлаЗагрузки", СокрЛП(ИмяФайлаЗагрузки));
		
	ИначеЕсли Не ПустаяСтрока(ИмяЛиста) Тогда
		Значение.Вставить("ИмяФайлаЗагрузки", 	  СокрЛП(ИмяФайлаЗагрузки));
		Значение.Вставить("ИмяЛиста", СокрЛП(ИмяЛиста));
		
	КонецЕсли;
	
	Возврат Значение
КонецФункции

&НаКлиенте
Процедура ЗагрузитьИзКаталогаАлгоритмыОбработка(Каталог)
	
	// Читаем тексты алгоритмов загрузки.
	КолАлгоритмов = 0;
	
	Для Каждого ТекАлгоритм Из РазложитьСтрокуВМассивПодстрок(Параметры.АлгоритмыСтрокой) Цикл
		
		КлючНастроек = ТекАлгоритм + "_" + ЭтаФорма.КлючНастроекОсновной;
		ТекФайл = Новый Файл(Каталог + "\" + КлючНастроек + ".txt");
		Если ТекФайл.Существует() Тогда
			ТекстФ = Новый ТекстовыйДокумент;
			ТекстФ.Прочитать(ТекФайл.ПолноеИмя);
			ЭтаФорма[ТекАлгоритм] = ТекстФ.ПолучитьТекст();
			КолАлгоритмов = КолАлгоритмов + 1;
		Иначе
			ЭтаФорма[ТекАлгоритм] = "";
			Сообщить("Файл алгоритма "+ТекФайл.Имя+" не обнаружен")
		КонецЕсли;
	
	КонецЦикла;
	
	Сообщить("Загружено "+КолАлгоритмов + " алгоритмов");
	
	ОбновитьКолАлгоритмов();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВКаталогАлгоритмыОбработка(Каталог)
	
	// Сохраняем тексты алгоритмов загрузки.
	КолАлгоритмов = 0;
	
	Для Каждого ТекАлгоритм Из РазложитьСтрокуВМассивПодстрок(Параметры.АлгоритмыСтрокой) Цикл
		
		Если ПустаяСтрока(ЭтаФорма[ТекАлгоритм]) Тогда
			Продолжить;
		КонецЕсли;
		
		КлючНастроек = ТекАлгоритм + "_" + ЭтаФорма.КлючНастроекОсновной;
		ТекФайл = Новый Файл(Каталог+"\" + КлючНастроек + ".txt");
		ТекстФ = Новый ТекстовыйДокумент;
		ТекстФ.УстановитьТекст(ЭтаФорма[ТекАлгоритм]);
		ТекстФ.Записать(ТекФайл.ПолноеИмя);
		
		КолАлгоритмов = КолАлгоритмов + 1;
	КонецЦикла;
	
	Сообщить("Сохранено "+КолАлгоритмов + " алгоритмов");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКаталогаВнешниеФайлыОбработка(Каталог)

	// Читаем тексты алгоритмов загрузки.
	ТаблицаВнешниеФайлы.Очистить();
	
	КолАлгоритмов = 0; Расширение = "epf";
	Для Каждого Файл Из НайтиФайлы(Каталог,"*.epf", Истина) Цикл
		ТекущиеДанные = ТаблицаВнешниеФайлы.Добавить();
		ТекущиеДанные.Данные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		ТекущиеДанные.Имя = ИмяПоПредставлению(Файл.ИмяБезРасширения) + "." + Расширение;
		ТекущиеДанные.ТипФайла = "Внешняя обработка";
		КолАлгоритмов = КолАлгоритмов + 1;
	КонецЦикла;
	Сообщить("Загружено "+КолАлгоритмов + " обработок");
	
	КолМакетов = 0; Расширение = "mxl";
	Для Каждого Файл Из НайтиФайлы(Каталог,"*.mxl", Истина) Цикл
		ТекущиеДанные = ТаблицаВнешниеФайлы.Добавить();
		ТекущиеДанные.Данные = Новый ДвоичныеДанные(Файл.ПолноеИмя);
		ТекущиеДанные.Имя = ИмяПоПредставлению(Файл.ИмяБезРасширения) + "." + Расширение;
		ТекущиеДанные.ТипФайла = "Макет mxl";
		КолМакетов = КолМакетов + 1;
	КонецЦикла;
	Сообщить("Загружено " + КолМакетов + " макетов mxl");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВКаталогВнешниеФайлыОбработка(Каталог)
	
	// Сохраняем тексты алгоритмов загрузки.
	КолАлгоритмов = 0; КолМакетов = 0;
	
	Для Каждого ТекущиеДанные Из ТаблицаВнешниеФайлы Цикл
		
		Если Прав(ТекущиеДанные.Имя, 4) = ".epf" Тогда
			Файл = Новый Файл(Каталог + "\" + ТекущиеДанные.Имя);
			ТекущиеДанные.Данные.Записать(Файл.ПолноеИмя);
			КолАлгоритмов = КолАлгоритмов + 1;
			
		ИначеЕсли Прав(ТекущиеДанные.Имя, 4) = ".mxl" Тогда
			Файл = Новый Файл(Каталог + "\" + ТекущиеДанные.Имя);
			ТекущиеДанные.Данные.Записать(Файл.ПолноеИмя);
			КолМакетов = КолМакетов + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Сообщить("Сохранено "+КолАлгоритмов + " обработок");
	Сообщить("Сохранено "+КолМакетов + " макетов");
		
КонецПроцедуры

&НаКлиенте
Процедура ТипЗначенияПредставлениеПриИзменении(СтрокаНомеровКолонок)
	
	ТипЗначенияПредставление = ""; ТипЗначения = СтрокаНомеровКолонок.ТипЗначения;
	ТипЗначенияПредставлениеПриИзмененииНаСервере(СтрокаНомеровКолонок.ТипЗначенияПредставление, ТипЗначенияПредставление, ТипЗначения);
	
	СтрокаНомеровКолонок.ТипЗначения = ТипЗначения;
	СтрокаНомеровКолонок.ТипЗначенияПредставление = ТипЗначенияПредставление;
	
КонецПроцедуры

&НаСервере
Функция СериализоватьОбъектФормыНаСервере(ИмяТЗ)
	
	Если ИмяТЗ = "НастройкиФормыОбщие" Тогда
		ОбъектДанных = НастройкиФормыОбщиеНаСервере()
	Иначе
		ОбъектДанных = РеквизитФормыВЗначение(ИмяТЗ);
	КонецЕсли;
	
	Возврат ОбъектОбработки().СериализоватьОбъект(ОбъектДанных);
	
КонецФункции

&НаСервере
Процедура ДеСериализоватьОбъектФормыНаСервере(ДанныеСтр, ИмяТЗ)
	
	ОбъектОбработка = ОбъектОбработки();
	
	Если ИмяТЗ = "НастройкиФормыОбщие" Тогда
		ОбъектДанных = ОбъектОбработка.ДеСериализоватьОбъект(ДанныеСтр);
		ЗаполнитьЗначенияСвойств(ЭтаФорма, ОбъектДанных);
		Возврат
	Иначе
		ОбъектДанных = ОбъектОбработка.ДеСериализоватьОбъект(ДанныеСтр);
	КонецЕсли;
	
	ЭтаФорма[ИмяТЗ].Очистить();
	Для Каждого Стр Из ОбъектДанных Цикл
		ЗаполнитьЗначенияСвойств(ЭтаФорма[ИмяТЗ].Добавить(), Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицаНомеровКолонокНаСервере()
	
	ОбъектОбработка = ОбъектОбработки();

	Для Каждого Стр Из ЭтаФорма["ТаблицаНомеровКолонок"] Цикл
		Стр.ТипЗначенияПредставление = ПолучитьСтрокуИзМассиваПодстрок(
			ОбъектОбработка.ОписаниеТиповПредставление(Стр.ТипЗначения).ВыгрузитьЗначения(),";"
			);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПослеВводаНомераСтрокиНаСервере()

	ОбъектОбработка = ОбъектОбработки();
	ОбъектОбработка.ОбновитьПредставленияОписанияТипов(ТаблицаНомеровКолонок);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяПоПредставлению(Представление) Экспорт
	
	Если ПустаяСтрока(Представление) Тогда
		Возврат ""
	КонецЕсли;
	
	Строка_Текущая = Представление;
	
	Пока Найти(Строка_Текущая, "  ") > 0 Цикл
		Строка_Текущая = СтрЗаменить(Строка_Текущая, "  ", " ");
	КонецЦикла;
	
	Строка_Текущая = СтрЗаменить(Строка_Текущая, ".", "_");
	Строка_Текущая = СтрЗаменить(Строка_Текущая, "-", "_");
	Строка_Текущая = СтрЗаменить(Строка_Текущая, Символ(160), "");
	
	// обрезаем спецсимволы в строке
	Строка_Текущая1 = Строка_Текущая;
	
	Строка_Текущая = "";
	Для й = 1 По СтрДлина(Строка_Текущая1) Цикл
		текСимвол = Сред(Строка_Текущая1, й, 1);
		Если ЭтоБуква(текСимвол) Или ЭтоЦифра(текСимвол) Или
			текСимвол = " " Или текСимвол = "_" Тогда
			Строка_Текущая = Строка_Текущая + текСимвол;
		КонецЕсли;
	КонецЦикла;
	Строка_Текущая1 = Строка_Текущая;
	
	// "пробел+букву" заменяем на букву в верхнем регистре
	Строка_Результат = "";
	Пока Найти(Строка_Текущая1, " ") > 0 Цикл
		
		поз = Найти(Строка_Текущая1, " ");
		Строка_Результат = Строка_Результат + ВРег(Лев(Строка_Текущая1, 1)) + Сред(Строка_Текущая1, 2, поз - 2);
		
		Строка_Текущая1 = Сред(Строка_Текущая1, поз + 1);
	КонецЦикла;
	Строка_Результат = Строка_Результат + ВРег(Лев(Строка_Текущая1, 1)) + Сред(Строка_Текущая1, 2);
	
	//Идентификатор не должен начинаться с цифры
	Если ЭтоЦифра(Лев(Строка_Результат,1)) Тогда
		Строка_Результат = "_" + Строка_Результат
	КонецЕсли;
	
	Возврат  Строка_Результат
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЦифра(Символ) Экспорт
	
	Возврат (Найти("0123456789", Символ) > 0);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоБуква(Символ) Экспорт
	
	Код = КодСимвола(Символ);
	
	Если (Код<=47) ИЛИ (Код>=58 И Код<=64) ИЛИ (Код>=91 И Код<=96)  ИЛИ (Код>=123 И Код<=126) Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#Область БСП

&НаКлиентеНаСервереБезКонтекста
// Функция "расщепляет" строку на подстроки, используя заданный
//      разделитель. Разделитель может иметь любую длину.
//      Если в качестве разделителя задан пробел, рядом стоящие пробелы
//      считаются одним разделителем, а ведущие и хвостовые пробелы параметра Стр
//      игнорируются.
//      Например,
//      РазложитьСтрокуВМассивПодстрок(",один,,,два", ",") возвратит массив значений из пяти элементов,
//      три из которых - пустые строки, а
//      РазложитьСтрокуВМассивПодстрок(" один   два", " ") возвратит массив значений из двух элементов
//
//  Параметры:
//      Стр -           строка, которую необходимо разложить на подстроки.
//                      Параметр передается по значению.
//      Разделитель -   строка-разделитель, по умолчанию - запятая.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - подстроки
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Стр, Разделитель = ",") Экспорт
	
	МассивСтрок = Новый Массив();
	Если Разделитель = " " Тогда
		Стр = СокрЛП(Стр);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				МассивСтрок.Добавить(Стр);
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр, Поз - 1));
			Стр = СокрЛ(Сред(Стр, Поз));
		КонецЦикла;
	Иначе
		ДлинаРазделителя = СтрДлина(Разделитель);
		Пока 1 = 1 Цикл
			Поз = Найти(Стр, Разделитель);
			Если Поз = 0 Тогда
				Если (СокрЛП(Стр) <> "") Тогда
					МассивСтрок.Добавить(Стр);
				КонецЕсли;
				Возврат МассивСтрок;
			КонецЕсли;
			МассивСтрок.Добавить(Лев(Стр,Поз - 1));
			Стр = Сред(Стр, Поз + ДлинаРазделителя);
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Возвращает строку, полученную из массива элементов, разделенных символом разделителя
//
// Параметры:
//  Массив - Массив - массив элементов из которых необходимо получить строку
//  Разделитель - Строка - любой набор символов, который будет использован как разделитель между элементами в строке
//
// Возвращаемое значение:
//  Результат - Строка - строка, полученная из массива элементов, разделенных символом разделителя
// 
Функция ПолучитьСтрокуИзМассиваПодстрок(Массив, Разделитель = ",")
	
	// возвращаемое значение функции
	Результат = "";
	
	Для Каждого Элемент Из Массив Цикл
		
		Подстрока = ?(ТипЗнч(Элемент) = Тип("Строка"), Элемент, Строка(Элемент));
		
		РазделительПодстрок = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + РазделительПодстрок + Подстрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Подставляет параметры в строку. Максимально возможное число параметров - 9.
// Параметры в строке задаются как %<номер параметра>. Нумерация параметров начинается с единицы.
//
// Параметры:
//  ШаблонСтроки  - Строка - шаблон строки с параметрами (вхождениями вида "%<номер параметра>", 
//                           например "%1 пошел в %2");
//  Параметр<n>   - Строка - значение подставляемого параметра.
//
// Возвращаемое значение:
//  Строка   - текстовая строка с подставленными параметрами.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 пошел в %2'"), "Вася", "Зоопарк") = "Вася пошел
//  в Зоопарк".
//
Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	ЕстьПараметрыСПроцентом = Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Вставляет параметры в строку, учитывая, что в параметрах могут использоваться подстановочные слова %1, %2 и т.д.
Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииЭкспорт

&НаКлиенте
Процедура ВопросЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		Если ДополнительныеПараметры.Действие = "Заполнить" Тогда
			ПолучитьДанные_Обработка();
			
		ИначеЕсли ДополнительныеПараметры.Действие = "Загрузить" Тогда
			ЗагрузитьДанные_Обработка();
			
		ИначеЕсли ДополнительныеПараметры.Действие = "ТаблицаИсторияУдалить" Тогда
			
			// Удаляем данные по настройке из БД.
			КлючНастроекУдалить = Элементы.ТаблицаИстория.ТекущиеДанные.КлючНастроек;
			ХранилищеОН_УдалитьВсеНаСервере(КлючНастроекУдалить);
			
			Для Каждого СтрокаИстория Из ТаблицаИстория Цикл
				Если СтрокаИстория.КлючНастроек = КлючНастроекУдалить Тогда
					ТаблицаИстория.Удалить(СтрокаИстория);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Если удаляем активную настройку - очистим данные в форме.
			Если ВРег(КлючНастроекУдалить) = ВРег(КлючНастроекОсновной) Тогда
				НоваяНастройкаОбработка(КодВозвратаДиалога.Да, Неопределено);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВопросЗавершениеСохранениеНастройкиДиалог(Ответ, ДополнительныеПараметры)
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗавершениеСохранениеНастройкиДиалог(Ответ, ДополнительныеПараметры)
	
	Если ДополнительныеПараметры.Действие = "КлючНастроекОсновнойНачалоВыбора" Тогда
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ХранилищеОН_СохранитьВсе();
			Модифицированность = Ложь;
			
		ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
			//Если Не ПустаяСтрока(Параметры.КлючНастроекОсновной) ИЛИ ДополнительныеПараметры.Событие = "ПередЗакрытием" Тогда
			//Если Не ПустаяСтрока(Параметры.КлючНастроекОсновной) 
			//	 ИЛИ (ДополнительныеПараметры.Событие = "ПередЗакрытием" И НЕ ПустаяСтрока(КлючНастроекОсновной)) Тогда
			Модифицированность = Ложь;
			//КонецЕсли;
			
		КонецЕсли;
			
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			
			Для Каждого ТекРеквизит Из Параметры.РеквизитыФормы Цикл
				ЭтаФорма[ТекРеквизит.Представление] = ТекРеквизит.Значение
			КонецЦикла;
			
		Иначе
			
			//РежимПоискаИстории = Не ПустаяСтрока(Параметры.КлючНастроекОсновной);

			Если ДополнительныеПараметры.Событие = "ПередЗакрытием" Тогда
				Закрыть();
				
			ИначеЕсли ДополнительныеПараметры.Событие = "НоваяНастройка" Тогда
				НоваяНастройкаОбработка(КодВозвратаДиалога.Да, Неопределено);
				
			ИначеЕсли ДополнительныеПараметры.Событие = "ИмяФайлаЗагрузкиМакетНачалоВыбора" Тогда

				Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
				Диалог.Фильтр = "Формат mxl (*.mxl)|*.mxl";
				Если Диалог.Выбрать() Тогда
					Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла_МХЛ", ЭтаФорма);
					НачатьПомещениеФайла(Оповещение,,Диалог.ПолноеИмяФайла,Ложь,УникальныйИдентификатор);
				КонецЕсли;

			ИначеЕсли ДополнительныеПараметры.Событие = "ИмяФайлаЗагрузкиМакетПриИзменении" Тогда

				Модифицированность = Истина;
				ИмяФайлаЗагрузкиМакет = ИмяПоПредставлению(ИмяФайлаЗагрузкиМакет);
				ОбновитьКлючНастроекОсновной(Истина, Истина);
				
			ИначеЕсли ДополнительныеПараметры.Событие = "ИмяФайлаЗагрузкиНачалоВыбора" Тогда
						
				Режим  = РежимДиалогаВыбораФайла.Открытие;
				ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
				ДиалогОткрытияФайла.ПолноеИмяФайла     = "";
				Фильтр = "Файл Excel(*.xls,*.xlsx;*.csv)|*.xls;*.XLSX;*.csv";
				ДиалогОткрытияФайла.Фильтр             = Фильтр;
				ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
				ДиалогОткрытияФайла.Заголовок          = "Выберите файл";
				Если ДиалогОткрытияФайла.Выбрать() Тогда
					ЭтаФорма.ИмяФайлаЗагрузки = ДиалогОткрытияФайла.ПолноеИмяФайла;
				Иначе
					Возврат
				КонецЕсли;
				
				ОбновитьExcel(Неопределено);
				ИмяЛиста = ""; Объект.ТаблицаДанныхExcelОбъект.Очистить();
				
				ОбновитьКлючНастроекОсновной(Истина, Истина,,,Истина);
				
				Файл = Новый Файл(ЭтаФорма.ИмяФайлаЗагрузки);
				ВосстановитьВсеНастройкиОбработка(ЭтаФорма.КлючНастроекОсновной, Файл.Путь);

			ИначеЕсли ДополнительныеПараметры.Событие = "ИмяФайлаЗагрузкиПриИзменении" Тогда

				ОбновитьExcel(Неопределено);
				ИмяЛиста = ""; Объект.ТаблицаДанныхExcelОбъект.Очистить();
				
				ОбновитьКлючНастроекОсновной(Истина, Истина,,,Истина);
				
				Файл = Новый Файл(ЭтаФорма.ИмяФайлаЗагрузки);
				ВосстановитьВсеНастройкиОбработка(ЭтаФорма.КлючНастроекОсновной, Файл.Путь);

			ИначеЕсли ДополнительныеПараметры.Событие = "ИмяЛистаПриИзменении" Тогда

				ОбновитьКлючНастроекОсновной(Истина, Истина,,,Истина);

				Файл = Новый Файл(ЭтаФорма.ИмяФайлаЗагрузки);
				ВосстановитьВсеНастройкиОбработка(ЭтаФорма.КлючНастроекОсновной, Файл.Путь);
				
			ИначеЕсли ДополнительныеПараметры.Событие = "РежимЧтенияДанныхПриИзменении" Тогда
				НоваяНастройкаОбработка(КодВозвратаДиалога.Да, Неопределено);
				ОбновитьКлючНастроекОсновной(Истина, Ложь);
	
			ИначеЕсли ДополнительныеПараметры.Событие = "ТаблицаИсторияВыбрать" Тогда
				Если НЕ Элементы.ТаблицаИстория.ТекущиеДанные = Неопределено Тогда
					ОбновитьКлючНастроекОсновной(Ложь, Ложь, Элементы.ТаблицаИстория.ТекущиеДанные.КлючНастроек);
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.Событие = "ТаблицаИсторияСохранитьВсеНастройки" Тогда
				
				Режим  = РежимДиалогаВыбораФайла.ВыборКаталога;
				ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
				ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
				ДиалогОткрытияФайла.Заголовок          = "Выберите каталог";
				Если ДиалогОткрытияФайла.Выбрать() Тогда
					
					Для Каждого СтрокаИстория Из ТаблицаИстория Цикл
						СохранитьВсеНастройкиОбработка(СтрокаИстория.КлючНастроек, ДиалогОткрытияФайла.Каталог);
					КонецЦикла;
					
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.Событие = "ТаблицаИсторияВосстановитьВсеНастройки" Тогда
							
				Режим  = РежимДиалогаВыбораФайла.ВыборКаталога;
				ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
				ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
				ДиалогОткрытияФайла.Заголовок          = "Выберите каталог";
				Если ДиалогОткрытияФайла.Выбрать() Тогда
					Для Каждого СтрокаИстория Из ТаблицаИстория Цикл
						ВосстановитьВсеНастройкиОбработка(СтрокаИстория.КлючНастроек, ДиалогОткрытияФайла.Каталог);
					КонецЦикла;
				КонецЕсли;
				
			ИначеЕсли ДополнительныеПараметры.Событие = "ТаблицаИсторияСкопировать" Тогда
				
				КлючНастроекИсточник = ДополнительныеПараметры.КлючНастроекИсточник;
				
				// КлючНастроекПриемник = КлючНастроекИсточник с постфиксом _Копия_<текущее дата-время>.
				Форма 		= ПолучитьФорму(Параметры.ПолноеИмяОбработки + ".Форма.ФормаВыборНастроек", Новый Структура, ЭтаФорма);
				КлючЭталон  = Форма.КлючЭталон(КлючНастроекИсточник);
				Если Лев(КлючЭталон, 7) <> "_Копия_" Тогда
					КлючЭталон = КлючЭталон + "_Копия_"
				КонецЕсли;
				КлючНастроекПриемник = КлючЭталон + Формат(ТекущаяДата(), "ДФ=yyyyMMddhhmmss");
				
				// Если каким-то чудом произошло совпадение с существующим именем - добавляем постфикс в конец.
				Пока ТаблицаИстория.НайтиСтроки(Новый Структура("КлючНастроек",КлючНастроекПриемник)).Количество() > 0 Цикл
					КлючНастроекПриемник = КлючНастроекПриемник + "1";
				КонецЦикла;
				
				ХранилищеОН_СкопироватьПереименоватьВсеНаСервере(КлючНастроекИсточник, КлючНастроекПриемник, Ложь);
				
				ТаблицаИсторияОбновитьНаСервере();
				ОбновитьКлючНастроекОсновной(Ложь, Ложь, КлючНастроекПриемник);
				
				//ЭтаФорма.Параметры.КлючНастроекОсновной = ЭтаФорма.КлючНастроекОсновной;
				//ТаблицаИсторияОбновитьНаСервере();
				//ТаблицаИсторияУстановитьТекущую(ТаблицаИстория); 
				
				Если НЕ Элементы.ТаблицаИстория.Видимость Тогда
					ТаблицаИсторияПоказатьСкрыть(Неопределено)
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВводаСтроки(СтрокаВведено, ДополнительныеПараметры) Экспорт
	
    Если НЕ СтрокаВведено = Неопределено Тогда
		
		КлючНастроекИсточник = Элементы.ТаблицаИстория.ТекущиеДанные.КлючНастроек;
		КлючНастроекПриемник = ИмяПоПредставлению(СтрокаВведено);
		
		Если ПустаяСтрока(КлючНастроекПриемник) Тогда
			Сообщить("Неверно задан ключ переименования!");
			Возврат
		ИначеЕсли ТаблицаИстория.НайтиСтроки(Новый Структура("КлючНастроек",КлючНастроекПриемник)).Количество() > 0 Тогда
			Сообщить("Данный ключ уже задан в истории ввида!");
			Возврат
		КонецЕсли;
		
		ХранилищеОН_СкопироватьПереименоватьВсеНаСервере(КлючНастроекИсточник, КлючНастроекПриемник, Истина);
		
		Элементы.ТаблицаИстория.ТекущиеДанные.КлючНастроек = КлючНастроекПриемник;
		ОбновитьКлючНастроекОсновной(Ложь, Ложь, Элементы.ТаблицаИстория.ТекущиеДанные.КлючНастроек);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КлючНастроекОсновнойПоУмолчанию() Экспорт
	
	Результат = "";
	
	ФайлЗагрузки = Новый Файл(ИмяФайлаЗагрузки);
	
	Если РежимЧтенияДанных = "По макету" Тогда
		Результат = СокрЛП(ИмяФайлаЗагрузкиМакет);
		
	ИначеЕсли РежимЧтенияДанных = "Из Excel (несколько листов)" Тогда
		Результат = СокрЛП(ФайлЗагрузки.ИмяБезРасширения);
		
	ИначеЕсли Не ПустаяСтрока(ИмяЛиста) Тогда
		Результат = ФайлЗагрузки.ИмяБезРасширения + "_" + СокрЛП(ИмяЛиста);
		
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

&НаКлиенте
Процедура ОбновитьКлючНастроекОсновной(РежимПоискаИстории, ЭтоПолучениеДанных, КлючНастроекОсновнойВыбрано = Неопределено, НеОбновлятьИзХранилища = Ложь, НеВосстанавливатьОбщие = Ложь) Экспорт
	
	Если КлючНастроекОсновнойВыбрано = Неопределено Тогда
		КлючНастроекОсновнойПараметр = КлючНастроекОсновнойПоУмолчанию();
	Иначе
		КлючНастроекОсновнойПараметр = КлючНастроекОсновнойВыбрано;
	КонецЕсли;
	
	Если РежимПоискаИстории Тогда
		
		//Оповещение = Новый ОписаниеОповещения("ПоискТиповОбработка", ЭтаФорма);
		ПараметрыФормы = Новый Структура("РежимПоискаИстории, ЭтоПолучениеДанных", РежимПоискаИстории, ЭтоПолучениеДанных);
		Форма = ПолучитьФорму(Параметры.ПолноеИмяОбработки + ".Форма.ФормаВыборНастроек", ПараметрыФормы, ЭтаФорма);
		Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		Форма.ТаблицаИсторияОбновить();
			
		КлючЭталон  = Форма.КлючЭталон(ЭтаФорма.КлючНастроекОсновнойПоУмолчанию());
		ЕстьАналоги = Форма.ЕстьАналоги(КлючЭталон);
				
		Если ЕстьАналоги Тогда
			Форма.Режим = "Выбор из списка";
			Форма.Открыть();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(КлючНастроекОсновнойПараметр) Тогда
		ЭтаФорма.КлючНастроекОсновной = КлючНастроекОсновнойПараметр;
	КонецЕсли;
	
	КлючПредыдущий = ЭтаФорма.Параметры.КлючНастроекОсновной;
	ТаблицаИсторияУстановитьТекущую(ТаблицаИстория);
	
	Если НЕ НеОбновлятьИзХранилища Тогда
		НайденыСохранныеНастройки = ХранилищеОН_ВосстановитьВсе(ЭтоПолучениеДанных, НеВосстанавливатьОбщие);
		Если НЕ НайденыСохранныеНастройки И Не ПустаяСтрока(КлючПредыдущий) Тогда
			// Настройки по ключу не найдены - восстанавливаем по предыдущему ключу.
			ЭтаФорма.КлючНастроекОсновной = КлючПредыдущий;
			ТаблицаИсторияУстановитьТекущую(ТаблицаИстория);
			ХранилищеОН_ВосстановитьВсе(ЭтоПолучениеДанных, НеВосстанавливатьОбщие);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
	Параметры.РеквизитыФормы.Очистить();
	Параметры.РеквизитыФормы.Добавить(ИмяЛиста, 			 "ИмяЛиста");
	Параметры.РеквизитыФормы.Добавить(ИмяФайлаЗагрузки, 	 "ИмяФайлаЗагрузки");
	Параметры.РеквизитыФормы.Добавить(ИмяФайлаЗагрузкиМакет, "ИмяФайлаЗагрузкиМакет");
	Параметры.РеквизитыФормы.Добавить(РежимЧтенияДанных, 	 "РежимЧтенияДанных");
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеНастройки() Экспорт
	
	ТекОписание = "%1; Таблица %3 строк, %2 колонок";
	Если ЭтаФорма.РежимЧтенияДанных = "По макету" Тогда
		ТекОписаниеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Макет %1 строк",ЭтаФорма.ТабДокОбъект.ВысотаТаблицы);
	Иначе
		ТекОписаниеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Файл,лист %1", ЭтаФорма.КлючНастроекОсновной);
	КонецЕсли;
	ТекОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекОписание,
		ТекОписаниеТекст, ЭтаФорма.ТаблицаНомеровКолонок.Количество(), ЭтаФорма.Объект.ТаблицаДанныхExcelОбъект.Количество());
		
	Возврат ТекОписание
КонецФункции

&НаКлиенте
Функция КлючНастроекАлгоритма(АлгоритмИмя) Экспорт
	Возврат АлгоритмИмя + "_" + ЭтаФорма.КлючНастроекОсновной;
КонецФункции

&НаКлиенте
Процедура ПослеВводаНомераСтроки_МХЛ(НомерСтроки, Параметры)
	
	ТипСтрока99  = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(99));
	ПараметрТипы = Новый Соответствие;
	
	Для НомерКолонки = 1 По ТабДокОбъект.ШиринаТаблицы Цикл
		
		ТекстЯчейки = ТабДокОбъект.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки).Текст;
		Если ПустаяСтрока(ТекстЯчейки) Тогда
			Продолжить;;
		КонецЕсли;
		
		ИмяКолонки = ИмяПоПредставлению(ТекстЯчейки);
		
		ИмяНайдено = Ложь; СтрокаКолонокНайдено = Неопределено;
		Для Каждого СтрокаКолонок Из ТаблицаНомеровКолонок Цикл
			Если СтрокаКолонок.Имя = ИмяКолонки Тогда
				ИмяНайдено = Истина;
				СтрокаКолонокНайдено = СтрокаКолонок;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ИмяНайдено Тогда
			НоваяСтрока = ТаблицаНомеровКолонок.Добавить();
			НоваяСтрока.НомерКолонки = НомерКолонки;
			НоваяСтрока.Имя = ИмяКолонки;
			НоваяСтрока.Представление = ТекстЯчейки;
			ПараметрТипы.Вставить(ИмяКолонки, ТипСтрока99);
		Иначе
			СтрокаКолонокНайдено.НомерКолонки = НомерКолонки;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбработкаОповещенияНаСервере("ПоискТипов", ПараметрТипы, "")
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПослеВводаНомераСтроки(НомерСтроки, Параметры) Экспорт
	
	Если НомерСтроки = Неопределено Тогда
		Возврат
	КонецЕсли;

	ЭтаФорма.НомерНачало = НомерСтроки + 1;

	Если РежимЧтенияДанных = "По макету" Тогда
		ПослеВводаНомераСтроки_МХЛ(НомерСтроки, Параметры);
		ПослеВводаНомераСтрокиНаСервере();
		Элементы.СтраницыЧтениеЗагрузка.ТекущаяСтраница = Элементы.СтраницаНомераКолонок;
		Возврат
	КонецЕсли;
	
	Если РежимЧтенияДанных = "Из Excel (несколько листов)" Тогда
		Если СписокЛистов.Количество() = 0 Тогда
			Возврат
		КонецЕсли;
		ТекИмяЛиста = СписокЛистов[0].Значение;
	Иначе
		ТекИмяЛиста = ИмяЛиста;
	КонецЕсли;
	
	Excel         = Новый COMОбъект("Excel.Application");
	Excel.Visible = 0;
	Excel.WorkBooks.Open(ИмяФайлаЗагрузки);
	
	ExcelDoc = Excel.WorkSheets(ТекИмяЛиста);
	
	НомерКолонки = 0;
	ТипСтрока99  = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(99));
	ПараметрТипы = Новый Соответствие;
	
	Пока Истина Цикл
		
		НомерКолонки = НомерКолонки + 1;
		
		ТекстЯчейки = ExcelDoc.Cells(НомерСтроки, НомерКолонки).Value;
		Если ПустаяСтрока(ТекстЯчейки) Тогда
			Прервать;
		КонецЕсли;
		
		ИмяКолонки = ИмяПоПредставлению(ТекстЯчейки);
		
		ИмяНайдено = Ложь; СтрокаКолонокНайдено = Неопределено;
		Для Каждого СтрокаКолонок Из ТаблицаНомеровКолонок Цикл
			Если СтрокаКолонок.Имя = ИмяКолонки Тогда
				ИмяНайдено = Истина;
				СтрокаКолонокНайдено = СтрокаКолонок;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ИмяНайдено Тогда
			НоваяСтрока = ТаблицаНомеровКолонок.Добавить();
			НоваяСтрока.НомерКолонки = НомерКолонки;
			НоваяСтрока.Имя = ИмяКолонки;
			НоваяСтрока.Представление = ТекстЯчейки;
			ПараметрТипы.Вставить(ИмяКолонки, ТипСтрока99);
		Иначе
			СтрокаКолонокНайдено.НомерКолонки = НомерКолонки;
		КонецЕсли;
		
	КонецЦикла;
	
	Excel.DisplayAlerts = 0;
	Excel.Quit();
	ExcelDoc = 0;
	Excel    = 0;
	
	ОбработкаОповещенияНаСервере("ПоискТипов", ПараметрТипы, "");
	
	ПослеВводаНомераСтрокиНаСервере();
	Элементы.СтраницыЧтениеЗагрузка.ТекущаяСтраница = Элементы.СтраницаНомераКолонок;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИмяФайлаЗагрузкиМакетНачалоВыбораНаСервере(ТабДок, Адрес)
	
	ДДанные = ПолучитьИзВременногоХранилища(Адрес);
	ИмяФ 	= ПолучитьИмяВременногоФайла("mxl");
	ДДанные.Записать(ИмяФ);
	
	ТабДок.Прочитать(ИмяФ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборФайла_МХЛ(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		ИмяФайлаЗагрузкиМакетНачалоВыбораНаСервере(ТабДокОбъект, Адрес);
		НомерКонец = ТабДокОбъект.ВысотаТаблицы;
		Файл = Новый Файл(ВыбранноеИмяФайла);
		ИмяФайлаЗагрузкиМакет = Файл.ИмяБезРасширения;
		//Модифицированность = Истина;
		
		Элементы.СтраницыЧтениеЗагрузка.ТекущаяСтраница = Элементы.СтраницаМакетДанных;
		
		ОбновитьКлючНастроекОсновной(Истина, Ложь,,,Истина);
		
		ВосстановитьВсеНастройкиОбработка(ЭтаФорма.КлючНастроекОсновной, Файл.Путь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЛистовОбработка(Результат, ДополнительныеПараметры) Экспорт
	 
	Если ТипЗнч(Результат) = Тип("СписокЗначений") Тогда
		
		СписокЛистов.Очистить();
		Для Каждого ТекЭлемент Из Результат Цикл
			Если ТекЭлемент.Пометка Тогда
				СписокЛистов.Добавить(ТекЭлемент.Значение);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура НоваяНастройкаОбработка(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Нет Тогда
        Возврат;
	КонецЕсли;
	
	ЭтаФорма.КлючНастроекОсновной = "";
	ЭтаФорма.Параметры.КлючНастроекОсновной = "";

	ТаблицаВнешниеФайлы.Очистить();
	ТаблицаЗначения.Очистить();
	
	Алгоритм_ПоискДанныхСтроки    = "";
	Алгоритм_ПослеЧтенияДанных    = "";
	Алгоритм_ЗагрузкаДанныхСтроки = "";
	Алгоритм_ПередЗагрузкойДанных = "";
	
	ТаблицаНомеровКолонок.Очистить();
	
	Объект.ТаблицаДанныхExcelОбъект.Очистить();
	ИмяФайлаЗагрузки = ""; ИмяЛиста = ""; ИмяФайлаЗагрузкиМакет = "";
	СписокЛистов.Очистить();
	Элементы.ИмяЛиста.СписокВыбора.Очистить();
	НомерНачало = 0; НомерКонец = 0;
	
	НоваяНастройкаОбработкаНаСервере();
	
	ОбновитьКлючНастроекОсновной(Ложь, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура НоваяНастройкаОбработкаНаСервере()
	ТабДокОбъект.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКолАлгоритмов() Экспорт
	
	КолАлгоритмов = 0;
	Для Каждого ТекАлгоритм Из РазложитьСтрокуВМассивПодстрок(Параметры.АлгоритмыСтрокой) Цикл
		Если Не ПустаяСтрока(ЭтаФорма[ТекАлгоритм]) Тогда
			КолАлгоритмов = КолАлгоритмов + 1
		КонецЕсли;
	КонецЦикла;
	
	Если КолАлгоритмов = 0 Тогда
		Элементы.ЗагрузитьИзКаталогаАлгоритмы.Заголовок = "Алгоритмы: загрузить из каталога";
	Иначе
		Элементы.ЗагрузитьИзКаталогаАлгоритмы.Заголовок = "Алгоритмы("+КолАлгоритмов+"): загрузить из каталога";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхExcelЗагрузитьИзТекстаОбработка(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ДополнительныеПараметры = Новый Структура
	КонецЕсли;
	
	ДополнительныеПараметры.Вставить("ТекстОшибки", "");
	 
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		Попытка
			ТаблицаДанныхExcelЗагрузитьИзТекстаНаСервере(Результат);
		Исключение
			ДополнительныеПараметры.ТекстОшибки = "Ошибка десериализации текста таблицы:" + ОписаниеОшибки();
			Сообщить(ДополнительныеПараметры.ТекстОшибки)
		КонецПопытки;
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаИсторияУстановитьТекущую(ТаблицаИсторияПараметр) Экспорт
	
	ЭтаФорма.Параметры.КлючНастроекОсновной = "";
	
	Для Каждого СтрокаДанных Из ТаблицаИсторияПараметр Цикл
		СтрокаДанных.ЭтоВыбранная = (СтрокаДанных.КлючНастроек = КлючНастроекОсновной);
		Если СтрокаДанных.ЭтоВыбранная Тогда
			ЭтаФорма.Параметры.КлючНастроекОсновной = СтрокаДанных.КлючНастроек;
		КонецЕсли;
	КонецЦикла;
	
	ИмяНастройки = ?(ПустаяСтрока(ЭтаФорма.Параметры.КлючНастроекОсновной),
		"<!!! Настройка не выбрана>",
		ЭтаФорма.Параметры.КлючНастроекОсновной);
		
	ЭтаФорма.Заголовок = "Загрузка из excel (" + ИмяНастройки + ")";
	
КонецПроцедуры

&НаКлиенте
Процедура ХранилищеОН_СохранитьВсе(ЭтоПолучениеДанных = Ложь) Экспорт
	
	Если ПустаяСтрока(ЭтаФорма.КлючНастроекОсновной) Тогда
		Возврат
	КонецЕсли;
	
	ОбновитьКлючНастроекОсновной(Ложь,Ложь,,Истина);
	ХранилищеОН_СохранитьВсеНаСервере(ЭтоПолучениеДанных, ЭтаФорма.КлючНастроекОсновной, ОписаниеНастройки());
	
	ЭтаФорма.Параметры.КлючНастроекОсновной = ЭтаФорма.КлючНастроекОсновной;
	ТаблицаИсторияОбновитьНаСервере();
	ТаблицаИсторияУстановитьТекущую(ТаблицаИстория);
	
	Если НЕ Элементы.ТаблицаИстория.Видимость Тогда
		ТаблицаИсторияПоказатьСкрыть(Неопределено)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ХранилищеОН_ВосстановитьВсе(ЭтоПолучениеДанных = Ложь, НеВосстанавливатьОбщие = Ложь) Экспорт
	
	Если ПустаяСтрока(ЭтаФорма.КлючНастроекОсновной) Тогда
		Возврат Ложь
	КонецЕсли;
	
	Возврат ХранилищеОН_ВосстановитьВсеНаСервере(ЭтоПолучениеДанных, ЭтаФорма.КлючНастроекОсновной, НеВосстанавливатьОбщие)
	
КонецФункции

&НаКлиенте
Процедура ТаблицаДанныхExcelОбъектПриИзменении(Элемент)
	
	Если Настройки_СохранятьТаблицаДанныхExcel Тогда
		Модифицированность = Истина
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДанныхExcelОбъектРедакторСтроки(Команда)
	
	ТекущиеДанные = Элементы.ТаблицаДанныхExcelОбъект.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ФормаОткрытие = ПолучитьФорму("ВнешняяОбработка.ЗагрузкаИзExcel.Форма.ФормаРедакторСтроки",,ЭтаФорма);
	Для Каждого ТекКолонка Из ТаблицаНомеровКолонок Цикл
		НоваяСтрока = ФормаОткрытие.Реквизиты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекКолонка);
		ТекущиеДанные.Свойство(ТекКолонка.Имя, НоваяСтрока.Значение);
	КонецЦикла;
	ФормаОткрытие.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаОткрытие.Открыть();
	
КонецПроцедуры

#КонецОбласти

